{"version":3,"sources":["models/index.ts","models/FundInfo.ts","models/FundDetails.ts","serviceWorker.ts","components/MenuAppBar.tsx","components/Revenue.tsx","components/FundPicker/FundItem.tsx","components/FundPicker/FundInfoItem.tsx","components/FundPicker/FundPicker.tsx","utils/KeyValueStore.ts","services/FundInfo.service.ts","components/FundView.tsx","components/FundHolding/FundHoldingItem.tsx","components/FundTable.tsx","Main.tsx","AppLoader.tsx","index.tsx"],"names":["FundInfo","company","funds","this","FundDetail","name","currentValue","dailyPercentage","yearlyPercentage","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","root","flexGrow","appbar","backgroundColor","position","height","title","textAlign","link","color","textDecoration","MenuAppBar","classes","React","useState","anchorEl","setAnchorEl","open","handleClose","className","AppBar","Toolbar","Typography","variant","IconButton","edge","onClick","event","currentTarget","aria-label","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","to","Revenue","fund","paddingLeft","spacing","FundItem","onAdd","ListItem","button","ListItemIcon","ListItemText","primary","FundInfoItem","fundInfo","onAddFund","setOpen","fundName","key","style","map","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","width","maxWidth","palette","background","paper","overflowY","FundPicker","allFunds","aria-labelledby","subheader","ListSubheader","index","KeyValueStore","dbName","storeName","indexedDB","value","startTransaction","objectStore","transaction","request","makePutRequest","Promise","all","db","close","items","requests","Object","keys","makeGetRequest","item","makeGetAllRequest","then","convertToObject","result","reduce","object","property","a","async","makeDeleteRequest","resolveRequest","rejectRequest","clearRequest","clear","onsuccess","onerror","resolve","reject","openDatabase","version","undefined","error","onblocked","console","onabort","onversionchange","hasObjectStore","onupgradeneeded","createObjectStore","objectStoreNames","contains","mode","initializeDatabase","transactionPromise","resolveTransaction","rejectTransaction","oncomplete","target","put","abort","delete","get","openCursor","cursor","continue","fundInfoService","fundStore","newFundKey","concat","getItem","alert","setItem","removeItem","holdings","getItems","fundRecord","createFundRecord","existingCompany","find","holdingInfo","push","sort","b","x","toLowerCase","y","log","info","split","shares","FundView","display","overflow","props","addFund","FundHoldingItem","onDelete","onHoldingsBlur","onHoldingsChange","state","internalHoldings","marginLeft","TextField","label","type","InputLabelProps","shrink","onChange","setState","Number","onBlur","FundTable","deleteFund","updateFunds","changeHoldings","getFunds","data","renderHolding","Component","Main","exact","path","render","AppLoader","document","Document","topElement","createElement","jsonData","JSON","stringify","pages","parse","default","allContent","length","content","element","insertAdjacentHTML","appendChild","rootElements","getElementsByClassName","j","childElementCount","children","innerHTML","trim","addFundInfo","fundDetail","getFundDetails","Container","marginTop","fundInfos","findIndex","elements","fundHeading","getFundNameAndValue","heading","getElementsByTagName","pos","decimals","charAt","isNumeric","slice","aPos","indexOf","isNaN","parseFloat","isFinite","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3e32587b.chunk.js","sourcesContent":["export * from './FundInfo';\nexport * from './FundDetails';\nexport * from './IFundRecord';\n","import { IFundDetail } from '.';\nimport { IFundRecord } from './IFundRecord';\n\nexport interface IFundInfo {\n    company: string;\n    funds: IFundDetail[];\n}\n\nexport class FundInfo implements IFundInfo {\n    public company: string;\n    public funds: IFundDetail[];\n    constructor(company: string) {\n        this.company = company;\n        this.funds = [];\n    }\n}\n","export interface IFundDetail {\n    name: string;\n    currentValue: number\n    dailyPercentage: number\n    yearlyPercentage: number\n}\n\nexport class FundDetail implements IFundDetail {\n    public name: string;\n    public currentValue: number\n    public dailyPercentage: number\n    public yearlyPercentage: number\n\n    constructor(name: string, currentValue: number) {\n        this.name = name\n        this.currentValue = currentValue\n        this.dailyPercentage = 0\n        this.yearlyPercentage = 0\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        appbar: {\n            backgroundColor: 'blue',\n            position: 'fixed',\n            height: 56,\n        },\n        title: {\n            textAlign: 'center',\n            flexGrow: 1,\n        },\n        link: {\n            color: 'rgba(0, 0, 0, 0.87)',\n            textDecoration: 'none',\n        },\n    }),\n);\n\nexport default function MenuAppBar() {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n\n    function handleMenu(event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(event.currentTarget);\n    }\n\n    function handleClose() {\n        setAnchorEl(null);\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar className={classes.appbar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Fondkollen\n                    </Typography>\n                    <div>\n                        <IconButton\n                            edge=\"end\"\n                            onClick={handleMenu}\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={open}\n                            onClose={handleClose}\n                        >\n                            <MenuItem onClick={handleClose}>\n                                <NavLink className={classes.link} to={'/funds'}>\n                                    Välj Fonder...\n                                </NavLink>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose}>\n                                <NavLink className={classes.link} to={'/holdings'}>\n                                    Mitt Innehav...\n                                </NavLink>\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","import * as React from 'react'\n\nexport class Revenue extends React.Component {\n    public render() {\n        return <div>Revenue</div>\n    }\n}","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport LocalAtm from '@material-ui/icons/LocalAtm';\nimport { IFundDetail } from '../../models/FundDetails';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        fund: {\n            paddingLeft: theme.spacing(4),\n        },\n    }),\n);\n\nexport interface IFundItemProps {\n    fund: IFundDetail;\n    onAdd(fundName: string): void;\n}\n\nexport const FundItem: React.FunctionComponent<IFundItemProps> = ({ fund, onAdd }) => {\n    const classes = useStyles();\n\n    return (\n        <ListItem button className={classes.fund} onClick={() => onAdd(fund.name)}>\n            <ListItemIcon>\n                <LocalAtm />\n            </ListItemIcon>\n            <ListItemText primary={fund.name} />\n        </ListItem>\n    );\n};\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { List } from '@material-ui/core';\nimport { IFundInfo } from '../../models';\nimport { FundItem } from './FundItem';\n\nexport interface IFundInfoItemProps {\n    fundInfo: IFundInfo;\n    onAddFund(compmany: string, fundName: string): void;\n}\n\nexport const FundInfoItem: React.FunctionComponent<IFundInfoItemProps> = ({\n    fundInfo,\n    onAddFund,\n}) => {\n    const [hoveredFund, setHoveredFund] = React.useState('');\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    const updateHoveredFund = (name: string) => {\n        setHoveredFund(name);\n    };\n\n    const resetHoveredFund = () => {\n        setHoveredFund('');\n    };\n\n    const onAdd = (fundName: string) => {\n        onAddFund(fundInfo.company, fundName);\n    };\n    return (\n        <div key={fundInfo.company}>\n            <ListItem style={{ color: 'green' }} button onClick={handleClick}>\n                <ListItemIcon>\n                    <BusinessCenterIcon />\n                </ListItemIcon>\n                <ListItemText primary={fundInfo.company} />\n                {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            {fundInfo.funds.map((fund) => {\n                return (\n                    <Collapse key={fund.name} in={open} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            <FundItem fund={fund} onAdd={onAdd} />\n                        </List>\n                    </Collapse>\n                );\n            })}\n        </div>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport { IFundInfo } from '../../models';\nimport { FundInfoItem } from './FundInfoItem';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n            overflowY: 'scroll',\n        },\n    }),\n);\n\nexport interface IFundPickerProps {\n    allFunds: IFundInfo[];\n    onAddFund(company: string, fundName: string): void;\n}\n\nexport const FundPicker: React.FunctionComponent<IFundPickerProps> = ({ allFunds, onAddFund }) => {\n    const classes = useStyles();\n\n    return (\n        <List\n            component=\"nav\"\n            aria-labelledby=\"nested-list-subheader\"\n            subheader={\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                    Välj Fonder\n                </ListSubheader>\n            }\n            className={classes.root}\n        >\n            {allFunds.map((fundInfo: IFundInfo, index) => {\n                return <FundInfoItem key={index} fundInfo={fundInfo} onAddFund={onAddFund} />;\n            })}\n        </List>\n    );\n};\n","export interface IItems<T> {\n    [key: string]: T;\n}\n\nexport interface IItem<T> {\n    key: string;\n    value: T;\n}\n\nexport class KeyValueStore<T> {\n    constructor(\n        private dbName: string,\n        private storeName: string,\n        private indexedDB = window.indexedDB,\n    ) {}\n\n    public async setItem(key: string, value: T): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = this.makePutRequest(objectStore, key, value);\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    public async setItems(items: { [key: string]: T }): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const requests = Object.keys(items).map((key) =>\n            this.makePutRequest(objectStore, key, items[key]),\n        );\n        await Promise.all([transaction, ...requests]);\n        objectStore.transaction.db.close();\n    }\n\n    public async getItem(key: string): Promise<T> {\n        const [objectStore, transaction] = await this.startTransaction();\n        const request = this.makeGetRequest(objectStore, key);\n        const [, item] = await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n        return item;\n    }\n\n    public async getItems(keys: string[] | null = null): Promise<IItems<T>> {\n        const [objectStore, transaction] = await this.startTransaction();\n\n        // no keys means get all\n        if (keys === null) {\n            return await this.makeGetAllRequest(objectStore);\n        }\n\n        const requests = keys.map((key) => {\n            return this.makeGetRequest(objectStore, key).then((value: T) => {\n                return { key, value } as IItem<T>;\n            });\n        });\n\n        const convertToObject = (result: Array<IItem<T>>) =>\n            result.reduce(\n                (object, property) => {\n                    object[property.key] = property.value;\n                    return object;\n                },\n                {} as IItems<T>,\n            );\n\n        objectStore.transaction.db.close();\n\n        return await Promise.all(requests)\n            .then(convertToObject)\n            .then(async (result) => {\n                await transaction;\n                return result;\n            });\n    }\n\n    public async removeItem(key: string): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = this.makeDeleteRequest(objectStore, key);\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    public async removeItems(keys: string[]): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const requests = keys.map((key) => this.makeDeleteRequest(objectStore, key));\n        await Promise.all([transaction, ...requests]);\n        objectStore.transaction.db.close();\n    }\n\n    public async clear(): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = new Promise((resolveRequest, rejectRequest) => {\n            const clearRequest = objectStore.clear();\n            clearRequest.onsuccess = resolveRequest;\n            clearRequest.onerror = rejectRequest;\n        });\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    private initializeDatabase(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => this.openDatabase(resolve, reject));\n    }\n\n    private openDatabase(\n        resolve: (value?: IDBDatabase) => void,\n        reject: (reason: any) => void,\n        version?: number,\n    ) {\n        // No indexedDB available, e.g. private tab in Edge\n        if (!this.indexedDB) {\n            return reject('No indexedDB support');\n        }\n\n        const request: IDBOpenDBRequest =\n            version === undefined\n                ? this.indexedDB.open(this.dbName)\n                : this.indexedDB.open(this.dbName, version);\n\n        request.onerror = () => reject(request.error);\n        // Logging for debug purposes, we should be able to recover after being blocked\n        request.onblocked = () => console.error('KeyValueStore blocked, store:', this.storeName);\n        request.onsuccess = () => {\n            const db = request.result;\n\n            db.onabort = reject;\n            db.onerror = reject;\n            db.onversionchange = db.close;\n\n            // The current database hasn't got the objectStore, close the database\n            // and open a new with higher version to trigger onupgradeneeded.\n            if (!this.hasObjectStore(db, this.storeName)) {\n                db.close();\n                this.openDatabase(resolve, reject, db.version + 1);\n                return;\n            }\n\n            resolve(db);\n        };\n        request.onupgradeneeded = () => {\n            const db = request.result;\n\n            if (this.hasObjectStore(db, this.storeName)) {\n                return;\n            }\n\n            db.createObjectStore(this.storeName);\n        };\n    }\n\n    private hasObjectStore(db: IDBDatabase, storeName: string) {\n        const objectStores: DOMStringList = db.objectStoreNames;\n\n        return objectStores.contains(storeName);\n    }\n\n    private async startTransaction(\n        mode: IDBTransactionMode = 'readonly',\n    ): Promise<[IDBObjectStore, Promise<Event>]> {\n        // Rejections from initialization should be cought by the consumers of the public methods\n        const db = await this.initializeDatabase();\n\n        try {\n            const transaction = db.transaction([this.storeName], mode);\n            const objectStore = transaction.objectStore(this.storeName);\n\n            const transactionPromise = new Promise<Event>(\n                (resolveTransaction, rejectTransaction) => {\n                    transaction.oncomplete = () => resolveTransaction();\n                    transaction.onerror = (event) => {\n                        /**\n                         * This step relies on any since the types lie from what we have been\n                         * able to tell. The transaction.error property that is documented on\n                         * MDN seems to be always null so either the unit tests mocking db\n                         * don't adhere to the API correctly (most probable cause) or something\n                         * else is wrong here.\n                         *\n                         * There are tests validating this in case the API would change but\n                         * those tests won't detect if the types changes.\n                         */\n                        rejectTransaction((event.target as any).error);\n                    };\n                },\n            );\n\n            return [objectStore, transactionPromise];\n        } catch (error) {\n            // Transaction failed, e.g. beacause it's closed, try to reinitialize the database\n            await this.initializeDatabase();\n            return this.startTransaction(mode);\n        }\n    }\n\n    private makePutRequest(objectStore: IDBObjectStore, key: string, value: T): Promise<Event> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            try {\n                const request = objectStore.put(value, key);\n                request.onsuccess = resolveRequest;\n                request.onerror = rejectRequest;\n            } catch (error) {\n                objectStore.transaction.abort();\n                return rejectRequest(error);\n            }\n        });\n    }\n\n    private makeDeleteRequest(objectStore: IDBObjectStore, key: string): Promise<Event> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const request = objectStore.delete(key);\n            request.onsuccess = resolveRequest;\n            request.onerror = rejectRequest;\n        });\n    }\n\n    private makeGetRequest(objectStore: IDBObjectStore, key: string): Promise<T> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const request = objectStore.get(key);\n            request.onsuccess = () => resolveRequest(request.result);\n            request.onerror = () => rejectRequest(request.error);\n        });\n    }\n\n    private makeGetAllRequest(objectStore: IDBObjectStore): Promise<IItems<T>> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const result: IItems<T> = {};\n            const request = objectStore.openCursor();\n\n            // onsuccess will fire for each property in the database, accumulating data in result\n            request.onsuccess = () => {\n                const cursor: IDBCursorWithValue | null = request.result;\n\n                if (cursor) {\n                    result[cursor.key as string] = cursor.value;\n                    cursor.continue();\n                    return;\n                }\n\n                resolveRequest(result);\n            };\n            request.onerror = rejectRequest;\n        });\n    }\n}\n","import { IFundDetail, IFundRecord } from '../models';\nimport { KeyValueStore, IItems } from '../utils';\n\nconst Company_Fund_Separator = '#/#/#';\nclass FundInfoService {\n    private fundStore = new KeyValueStore<number>('fondkollen', 'fundInfo');\n    public async addFund(company: string, name: string): Promise<void> {\n        const newFundKey = company.concat(Company_Fund_Separator, name);\n        const existingFund = (await this.fundStore.getItem(newFundKey)) !== undefined;\n\n        if (existingFund) {\n            alert('Den här fonden finns redan bland dina fonder!');\n        } else {\n            this.fundStore.setItem(newFundKey, 0);\n        }\n    }\n\n    public async deleteFund(company: string, name: string) {\n        const key = company.concat(Company_Fund_Separator, name);\n        await this.fundStore.removeItem(key);\n    }\n\n    public async changeHoldings(company: string, name: string, holdings: number) {\n        const key = company.concat(Company_Fund_Separator, name);\n        await this.fundStore.removeItem(key);\n        await this.fundStore.setItem(key, holdings);\n    }\n    public async getFunds(): Promise<IFundRecord[]> {\n        const keys = await this.fundStore.getItems();\n        const funds: IFundRecord[] = [];\n        for (const key in keys) {\n            const fundRecord = this.createFundRecord(key, await this.fundStore.getItem(key));\n            const existingCompany = funds.find((fund) => fund.company === fundRecord.company);\n            if (existingCompany) {\n                existingCompany.holdingInfo.push(fundRecord.holdingInfo[0]);\n                existingCompany.holdingInfo.sort((a, b) => {\n                    const x = a.fundName.toLowerCase();\n                    const y = b.fundName.toLowerCase();\n                    if (x < y) {\n                        return -1;\n                    }\n                    if (x > y) {\n                        return 1;\n                    }\n                    return 0;\n                });\n            } else {\n                funds.push(fundRecord);\n            }\n        }\n        funds.sort((a, b) => {\n            const x = a.company.toLowerCase();\n            const y = b.company.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n        console.log(funds);\n        return funds;\n    }\n\n    private createFundRecord(key: string, value: number): IFundRecord {\n        const info = key.split(Company_Fund_Separator);\n        return { company: info[0], holdingInfo: [{ fundName: info[1], shares: value }] };\n    }\n}\n\nexport const fundInfoService = new FundInfoService();\n\n// public setCustomerInfo(projectId: Id, value: string): Promise<void> {\n//     return this.customerInfoStore.setItem(projectId, value);\n// }\n\n// public async getCustomerInfo(projectId: Id): Promise<string> {\n//     const project = await this.projectService.get(projectId);\n//     let customerInfo = await this.customerInfoStore.getItem(project.id);\n//     if (customerInfo) {\n//         return customerInfo;\n//     }\n\n//     // Item could have asd1 key if migrated project\n//     if (project.origin && project.origin.source === 'asd1') {\n//         customerInfo = await this.customerInfoStore.getItem(project.origin.id);\n\n//         // Update key with asd2 project id if found\n//         if (customerInfo) {\n//             const preparedFor = JSON.parse(customerInfo);\n//             this.customerInfoStore.setItem(projectId, preparedFor);\n//             this.customerInfoStore.removeItem(project.origin.id);\n//             return preparedFor;\n//         }\n//     }\n\n//     // We always default to an empty string for validation simplicity\n//     // in the rest of the application.\n//     return '';\n// }\n\n// public async clearCustomerInfo(): Promise<void> {\n//     return this.customerInfoStore.clear();\n// }\n","import * as React from 'react';\nimport { IFundInfo } from '../models';\nimport { FundPicker } from './FundPicker';\nimport { fundInfoService } from '../services';\n\nexport interface IFundViewProps {\n    funds: IFundInfo[];\n}\nexport class FundView extends React.Component<IFundViewProps> {\n    public render() {\n        return (\n            <div style={{ display: 'flex', overflow: 'hidden' }}>\n                <FundPicker allFunds={this.props.funds} onAddFund={this.addFund} />\n            </div>\n        );\n    }\n\n    private async addFund(company: string, name: string) {\n        await fundInfoService.addFund(company, name);\n    }\n}\n","import { IFundRecord } from '../../models';\nimport * as React from 'react';\nimport { ListItem, ListItemText, TextField, IconButton } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nexport interface IFundHoldingProps {\n    company: string;\n    fundName: string;\n    holdings: number;\n    onDelete(company: string, fundName: string): void;\n    onHoldingsChange(company: string, fund: string, holdings: number): void;\n}\n\ninterface IFundHoldingState {\n    internalHoldings: number;\n}\n\nexport class FundHoldingItem extends React.Component<IFundHoldingProps, IFundHoldingState> {\n    constructor(props: IFundHoldingProps) {\n        super(props);\n        this.state = {\n            internalHoldings: this.props.holdings,\n        };\n    }\n\n    public render() {\n        return (\n            <ListItem button style={{ marginLeft: 4 }}>\n                <ListItemText primary={this.props.fundName} />\n                <TextField\n                    style={{ maxWidth: 80 }}\n                    label=\"Andelar\"\n                    variant=\"outlined\"\n                    type=\"number\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    value={this.state.internalHoldings}\n                    onChange={(event) => {\n                        const { value } = event.target;\n                        this.setState({ internalHoldings: Number(value) });\n                    }}\n                    onBlur={this.onHoldingsBlur}\n                />\n                <IconButton edge=\"end\" aria-label=\"delete fund\" onClick={this.onDelete}>\n                    <DeleteIcon />\n                </IconButton>\n            </ListItem>\n        );\n    }\n\n    private onDelete = () => {\n        this.props.onDelete(this.props.company, this.props.fundName);\n    };\n\n    private onHoldingsBlur = () => {\n        this.props.onHoldingsChange(\n            this.props.company,\n            this.props.fundName,\n            this.state.internalHoldings,\n        );\n    };\n}\n","import React from 'react';\nimport { IFundRecord } from '../models';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\n\nimport { fundInfoService } from '../services';\nimport { FundHoldingItem } from './FundHolding/FundHoldingItem';\n\nexport interface IFundTableState {\n    funds: IFundRecord[];\n}\n\nexport class FundTable extends React.Component<{}, IFundTableState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            funds: [],\n        };\n    }\n    public async componentDidMount() {\n        const data = await fundInfoService.getFunds();\n        this.setState({ funds: data });\n    }\n\n    public render() {\n        return (\n            <div style={{ display: 'flex', overflow: 'hidden' }}>\n                <List\n                    style={{\n                        width: '100%',\n                        maxWidth: 360,\n                        backgroundColor: 'white',\n                        overflowY: 'scroll',\n                    }}\n                    component=\"nav\"\n                    aria-labelledby=\"nested-list-subheader\"\n                >\n                    {this.state.funds.map((fund) => {\n                        return this.renderHolding(fund);\n                    })}\n                </List>\n            </div>\n        );\n    }\n\n    private renderHolding(fund: IFundRecord) {\n        return (\n            <div key={fund.company}>\n                <ListItem style={{ color: 'green' }}>\n                    <ListItemText primary={fund.company} />\n                </ListItem>\n                {fund.holdingInfo.map((item) => {\n                    return (\n                        <FundHoldingItem\n                            key={item.fundName}\n                            company={fund.company}\n                            fundName={item.fundName}\n                            holdings={item.shares || 0}\n                            onDelete={this.deleteFund}\n                            onHoldingsChange={this.changeHoldings}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n\n    private deleteFund = (company: string, fund: string) => {\n        fundInfoService.deleteFund(company, fund).then(() => {\n            this.updateFunds();\n        });\n    };\n\n    private changeHoldings = (company: string, fund: string, holdings: number) => {\n        fundInfoService.changeHoldings(company, fund, holdings).then(() => {\n            this.updateFunds();\n        });\n    };\n\n    private async updateFunds() {\n        const data = await fundInfoService.getFunds();\n        this.setState({\n            funds: data,\n        });\n    }\n}\n","import * as React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport { Revenue, FundView } from './components';\nimport { IFundInfo } from './models';\nimport { FundTable } from './components/FundTable';\n\nexport interface IMainProps {\n    funds: IFundInfo[];\n}\nexport class Main extends React.Component<IMainProps> {\n    // Get data from indexed db in componentDidUpdate or something!!!\n\n    public render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" component={Revenue} />\n                <Route path=\"/funds\" render={(props) => <FundView funds={this.props.funds} />} />\n                <Route path=\"/holdings\" render={(props) => <FundTable />} />\n            </Switch>\n        );\n    }\n}\n","import * as React from 'react';\nimport * as data from './fonderMock.json';\nimport { MemoryRouter } from 'react-router';\nimport { IFundInfo, FundInfo, IFundDetail, FundDetail, IFundRecord } from './models';\nimport { Main } from './Main';\nimport MenuAppBar from './components/MenuAppBar';\nimport Container from '@material-ui/core/Container';\nimport { fundInfoService } from './services/index.js';\nexport class AppLoader extends React.Component {\n    private allFunds: IFundInfo[] = [];\n\n    constructor(props: any) {\n        super(props);\n        const document = new Document();\n        const topElement: HTMLElement = document.createElement('rootEl');\n\n        const jsonData = JSON.stringify(data);\n        const fundData = JSON.parse(jsonData);\n        const pages = fundData.default;\n        const allContent = [];\n        for (let index = 0; index < pages.length; index++) {\n            allContent.push(pages[index].content);\n        }\n\n        for (let index = 0; index < allContent.length; index++) {\n            const element = allContent[index];\n            topElement.insertAdjacentHTML('afterbegin', element);\n        }\n        document.appendChild(topElement);\n\n        const rootElements = document.getElementsByClassName('root');\n\n        for (let index = 0; index < rootElements.length; index++) {\n            const root = rootElements[index];\n\n            let fundInfo = new FundInfo('');\n            for (let j = 0; j < root.childElementCount; j++) {\n                const element = root.children[j];\n                if (element.className === 'G' && element.innerHTML.trim() !== '') {\n                    if (fundInfo.funds.length > 0) {\n                        this.allFunds = this.addFundInfo(fundInfo, this.allFunds);\n                    }\n                    fundInfo = new FundInfo(element.innerHTML.trim());\n                }\n                if (\n                    fundInfo.company &&\n                    element.className === 'W' &&\n                    element.innerHTML.trim() !== ''\n                ) {\n                    const fundDetail = this.getFundDetails([\n                        root.children[j],\n                        root.children[j + 1],\n                        root.children[j + 2],\n                    ]);\n                    if (fundDetail) {\n                        fundInfo.funds.push(fundDetail);\n                    }\n                }\n            }\n            if (fundInfo.funds.length > 0) {\n                this.allFunds = this.addFundInfo(fundInfo, this.allFunds);\n            }\n        }\n\n        this.allFunds.sort((a, b) => {\n            const x = a.company.toLowerCase();\n            const y = b.company.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n    }\n\n    public render() {\n        return (\n            <MemoryRouter>\n                <MenuAppBar />\n                <Container style={{ marginTop: 56 }}>\n                    <Main funds={this.allFunds} />\n                </Container>\n            </MemoryRouter>\n        );\n    }\n\n    private addFundInfo(fundInfo: IFundInfo, fundInfos: IFundInfo[]): IFundInfo[] {\n        const index = fundInfos.findIndex((item) => {\n            return item.company === fundInfo.company;\n        });\n        fundInfo.funds.sort((a, b) => {\n            const x = a.name.toLowerCase();\n            const y = b.name.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n        if (index >= 0) {\n            fundInfos[index].funds = fundInfos[index].funds.concat(fundInfo.funds);\n        } else {\n            fundInfos.push(fundInfo);\n        }\n        return fundInfos;\n    }\n\n    private getFundDetails(elements: Element[]): IFundDetail | null {\n        const fundHeading = this.getFundNameAndValue(elements[0]);\n        const fund = new FundDetail(fundHeading.name!, fundHeading.currentValue!);\n\n        for (let index = elements.length - 1; index > 0; index--) {\n            const element = elements[index];\n            if (element.className === 'C' || element.className === 'Y') {\n                if (fund.yearlyPercentage) {\n                    fund.dailyPercentage = Number(element.innerHTML.trim());\n                } else {\n                    fund.yearlyPercentage = Number(element.innerHTML.trim());\n                }\n            }\n        }\n        return fund.yearlyPercentage ? fund : null;\n    }\n\n    private getFundNameAndValue(element: Element): Partial<IFundDetail> {\n        const heading = element.innerHTML.trim();\n\n        // Special check for avoiding spans containing <a> elements with the integer part of the value we're looking for\n        const children = element.getElementsByTagName('a');\n        if (children.length > 0) {\n            let pos = heading.length - 1;\n            let decimals = heading.charAt(pos);\n            while (this.isNumeric(decimals) && pos >= 0) {\n                decimals = heading.charAt(--pos) + decimals;\n            }\n            const value = children[0].innerHTML + decimals.slice(1);\n            const aPos = heading.indexOf('<');\n            return {\n                name: heading.slice(0, aPos).trim(),\n                currentValue: Number(value),\n            };\n        }\n\n        let pos = heading.length - 1;\n        let value = heading.charAt(pos);\n        while (this.isNumeric(value) && pos >= 0) {\n            value = heading.charAt(--pos) + value;\n        }\n        return {\n            name: heading.slice(0, pos + 1).trim(),\n            currentValue: Number(heading.slice(pos + 1, heading.length)),\n        };\n    }\n\n    private isNumeric(value: any) {\n        if (value.slice(0, 1) === ' ') {\n            return false;\n        }\n        var count = (value.match(/\\./g) || []).length;\n        if (count > 1) {\n            return false;\n        }\n        return !isNaN(parseFloat(value)) && isFinite(value);\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { AppLoader } from './AppLoader';\n\nReactDOM.render(<div>\n    <AppLoader />\n</div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}