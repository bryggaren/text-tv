{"version":3,"sources":["serviceWorker.ts","components/MenuAppBar.tsx","utils/KeyValueStore.ts","models/IFundInfo.ts","models/IFundDetail.ts","models/IUserFundStorageItem.ts","models/IFundInfoStorageItem.ts","services/UserFund.service.ts","communicators/TextTv.communicator.ts","services/FundInfo.service.ts","services/Financial.service.ts","components/Revenue.tsx","components/FundPicker/FundItem.tsx","components/FundPicker/FundInfoItem.tsx","components/FundPicker/FundPicker.tsx","components/FundView.tsx","components/FundHolding/FundHoldingItem.tsx","components/FundTable.tsx","Main.tsx","AppLoader.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","root","flexGrow","appbar","backgroundColor","position","height","title","textAlign","link","color","textDecoration","MenuAppBar","classes","React","useState","anchorEl","setAnchorEl","open","handleClose","className","AppBar","Toolbar","Typography","variant","IconButton","edge","onClick","event","currentTarget","aria-label","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","to","KeyValueStore","dbName","storeName","indexedDB","key","value","this","startTransaction","objectStore","transaction","request","makePutRequest","Promise","all","db","close","items","requests","Object","keys","map","makeGetRequest","item","makeGetAllRequest","then","convertToObject","result","reduce","object","property","a","async","makeDeleteRequest","resolveRequest","rejectRequest","clearRequest","clear","onsuccess","onerror","resolve","reject","openDatabase","version","undefined","error","onblocked","console","onabort","onversionchange","hasObjectStore","onupgradeneeded","createObjectStore","objectStoreNames","contains","mode","initializeDatabase","transactionPromise","resolveTransaction","rejectTransaction","oncomplete","target","put","abort","delete","get","openCursor","cursor","continue","FundInfo","company","funds","FundDetail","name","currentValue","price","dailyPercentage","yearlyPercentage","UserFundStorageItem","shares","FundInfoStorageItem","userFundService","fundStore","newFundKey","concat","getItem","alert","setItem","removeItem","addFund","getItems","push","textTvCommunicator","fetch","response","ok","json","statusText","jsonData","JSON","stringify","mockData","fundData","parse","default","fundInfoService","allFunds","document","Document","topElement","createElement","getFundPages","pages","allContent","index","length","content","element","insertAdjacentHTML","appendChild","rootElements","getElementsByClassName","fundInfo","childNodes","Array","from","j","innerHTML","trim","addFundInfo","maxItems","nodes","slice","fundDetail","getFundDetails","sort","b","x","toLowerCase","y","getFundStorageItems","addFundInfoToStorage","log","getFunds","userFunds","fundInfoStorageItems","forEach","userFund","companyItem","find","fund","filteredFunds","Date","toLocaleTimeString","toLocaleDateString","fundInfos","findIndex","nodeType","fundName","String","nodeValue","fundValue","getFundValue","dailyFound","yearlyFound","Number","elementValue","isNaN","financialService","fundItems","total","percentage","originalValue","dailyRevenue","Revenue","props","state","dailyTotal","getDailyRevenue","daily","setState","style","paddingLeft","spacing","FundItem","onAdd","ListItem","button","ListItemIcon","ListItemText","primary","FundInfoItem","onAddFund","setOpen","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","width","maxWidth","palette","background","paper","overflowY","FundPicker","aria-labelledby","subheader","ListSubheader","FundView","display","overflow","UserFundItem","onDelete","onBlur","onSharesChange","marginLeft","TextField","label","type","InputLabelProps","shrink","onChange","FundTable","deleteFund","updateFunds","updateShares","data","getGroupedFunds","groupBy","Component","Main","exact","path","render","AppLoader","getFundInfo","Container","marginTop","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sJAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wLCPAC,EAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,OAAQ,CACJC,gBAAiB,OACjBC,SAAU,QACVC,OAAQ,IAEZC,MAAO,CACHC,UAAW,SACXN,SAAU,GAEdO,KAAM,CACFC,MAAO,sBACPC,eAAgB,aAKb,SAASC,IACpB,IAAMC,EAAUhB,IADiB,EAEDiB,IAAMC,SAA6B,MAFlC,mBAE1BC,EAF0B,KAEhBC,EAFgB,KAG3BC,EAAO1B,QAAQwB,GAMrB,SAASG,IACLF,EAAY,MAGhB,OACI,yBAAKG,UAAWP,EAAQZ,MACpB,kBAACoB,EAAA,EAAD,CAAQD,UAAWP,EAAQV,QACvB,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKJ,UAAWP,EAAQN,OAA5C,cAGA,6BACI,kBAACkB,EAAA,EAAD,CACIC,KAAK,MACLC,QAlBxB,SAAoBC,GAChBX,EAAYW,EAAMC,gBAkBEnB,MAAM,UACNoB,aAAW,QAEX,kBAAC,IAAD,OAEJ,kBAAC,IAAD,CACIC,GAAG,cACHf,SAAUA,EACVgB,aAAc,CACVC,SAAU,MACVC,WAAY,SAEhBC,aAAW,EACXC,gBAAiB,CACbH,SAAU,MACVC,WAAY,SAEhBhB,KAAMA,EACNmB,QAASlB,GAET,kBAACmB,EAAA,EAAD,CAAUX,QAASR,GACf,kBAAC,IAAD,CAASC,UAAWP,EAAQJ,KAAM8B,GAAI,UAAtC,sBAIJ,kBAACD,EAAA,EAAD,CAAUX,QAASR,GACf,kBAAC,IAAD,CAASC,UAAWP,EAAQJ,KAAM8B,GAAI,aAAtC,eAIJ,kBAACD,EAAA,EAAD,CAAUX,QAASR,GACf,kBAAC,IAAD,CAASC,UAAWP,EAAQJ,KAAM8B,GAAI,KAAtC,mB,YC9EnBC,EAAb,WACI,WACYC,EACAC,GAET,IADSC,EACV,uDADsBlD,OAAOkD,UAC7B,yBAHUF,SAGV,KAFUC,YAEV,KADUC,YAJhB,oDAOyBC,EAAaC,GAPtC,0GAQiDC,KAAKC,iBAAiB,cARvE,0CAQeC,EARf,KAQ4BC,EAR5B,KAScC,EAAUJ,KAAKK,eAAeH,EAAaJ,EAAKC,GAT9D,mBAUcO,QAAQC,IAAI,CAACJ,EAAaC,KAVxC,OAWQF,EAAYC,YAAYK,GAAGC,QAXnC,iFAc0BC,GAd1B,iHAeiDV,KAAKC,iBAAiB,cAfvE,0CAeeC,EAff,KAe4BC,EAf5B,KAgBcQ,EAAWC,OAAOC,KAAKH,GAAOI,KAAI,SAAChB,GAAD,OACpC,EAAKO,eAAeH,EAAaJ,EAAKY,EAAMZ,OAjBxD,mBAmBcQ,QAAQC,IAAR,CAAaJ,GAAb,mBAA6BQ,MAnB3C,OAoBQT,EAAYC,YAAYK,GAAGC,QApBnC,gFAuByBX,GAvBzB,gHAwBiDE,KAAKC,oBAxBtD,0CAwBeC,EAxBf,KAwB4BC,EAxB5B,KAyBcC,EAAUJ,KAAKe,eAAeb,EAAaJ,GAzBzD,mBA0B+BQ,QAAQC,IAAI,CAACJ,EAAaC,KA1BzD,0CA0BiBY,EA1BjB,KA2BQd,EAAYC,YAAYK,GAAGC,QA3BnC,kBA4BeO,GA5Bf,iMA+B0BH,EA/B1B,+BA+BkD,KA/BlD,mBAgCiDb,KAAKC,oBAhCtD,sCAgCeC,EAhCf,KAgC4BC,EAhC5B,KAmCqB,OAATU,EAnCZ,4CAoCyBb,KAAKiB,kBAAkBf,IApChD,wDAuCcS,EAAWE,EAAKC,KAAI,SAAChB,GACvB,OAAO,EAAKiB,eAAeb,EAAaJ,GAAKoB,MAAK,SAACnB,GAC/C,MAAO,CAAED,MAAKC,eAIhBoB,EAAkB,SAACC,GAAD,OACpBA,EAAOC,QACH,SAACC,EAAQC,GAEL,OADAD,EAAOC,EAASzB,KAAOyB,EAASxB,MACzBuB,IAEX,KAGRpB,EAAYC,YAAYK,GAAGC,QAtDnC,oBAwDqBH,QAAQC,IAAII,GACpBO,KAAKC,GACLD,MAAK,SAAOE,GAAP,SAAAI,EAAAC,OAAA,kEAAAD,EAAA,MACIrB,GADJ,gCAEKiB,GAFL,yCA1DlB,4HAgE4BtB,GAhE5B,0GAiEiDE,KAAKC,iBAAiB,cAjEvE,0CAiEeC,EAjEf,KAiE4BC,EAjE5B,KAkEcC,EAAUJ,KAAK0B,kBAAkBxB,EAAaJ,GAlE5D,mBAmEcQ,QAAQC,IAAI,CAACJ,EAAaC,KAnExC,OAoEQF,EAAYC,YAAYK,GAAGC,QApEnC,oFAuE6BI,GAvE7B,iHAwEiDb,KAAKC,iBAAiB,cAxEvE,0CAwEeC,EAxEf,KAwE4BC,EAxE5B,KAyEcQ,EAAWE,EAAKC,KAAI,SAAChB,GAAD,OAAS,EAAK4B,kBAAkBxB,EAAaJ,MAzE/E,mBA0EcQ,QAAQC,IAAR,CAAaJ,GAAb,mBAA6BQ,MA1E3C,OA2EQT,EAAYC,YAAYK,GAAGC,QA3EnC,0LA+EiDT,KAAKC,iBAAiB,cA/EvE,0CA+EeC,EA/Ef,KA+E4BC,EA/E5B,KAgFcC,EAAU,IAAIE,SAAQ,SAACqB,EAAgBC,GACzC,IAAMC,EAAe3B,EAAY4B,QACjCD,EAAaE,UAAYJ,EACzBE,EAAaG,QAAUJ,KAnFnC,mBAqFctB,QAAQC,IAAI,CAACJ,EAAaC,KArFxC,OAsFQF,EAAYC,YAAYK,GAAGC,QAtFnC,6FAyFwD,IAAD,OAC/C,OAAO,IAAIH,SAAQ,SAAC2B,EAASC,GAAV,OAAqB,EAAKC,aAAaF,EAASC,QA1F3E,mCA8FQD,EACAC,EACAE,GACD,IAAD,OAEE,IAAKpC,KAAKH,UACN,OAAOqC,EAAO,wBAGlB,IAAM9B,OACUiC,IAAZD,EACMpC,KAAKH,UAAUzB,KAAK4B,KAAKL,QACzBK,KAAKH,UAAUzB,KAAK4B,KAAKL,OAAQyC,GAE3ChC,EAAQ4B,QAAU,kBAAME,EAAO9B,EAAQkC,QAEvClC,EAAQmC,UAAY,kBAAMC,QAAQF,MAAM,gCAAiC,EAAK1C,YAC9EQ,EAAQ2B,UAAY,WAChB,IAAMvB,EAAKJ,EAAQgB,OAQnB,GANAZ,EAAGiC,QAAUP,EACb1B,EAAGwB,QAAUE,EACb1B,EAAGkC,gBAAkBlC,EAAGC,OAInB,EAAKkC,eAAenC,EAAI,EAAKZ,WAG9B,OAFAY,EAAGC,aACH,EAAK0B,aAAaF,EAASC,EAAQ1B,EAAG4B,QAAU,GAIpDH,EAAQzB,IAEZJ,EAAQwC,gBAAkB,WACtB,IAAMpC,EAAKJ,EAAQgB,OAEf,EAAKuB,eAAenC,EAAI,EAAKZ,YAIjCY,EAAGqC,kBAAkB,EAAKjD,cAvItC,qCA2I2BY,EAAiBZ,GAGpC,OAFoCY,EAAGsC,iBAEnBC,SAASnD,KA9IrC,4IAkJQoD,EAlJR,+BAkJmC,WAlJnC,mBAqJyBhD,KAAKiD,sBArJ9B,cAqJczC,EArJd,gBAwJkBL,EAAcK,EAAGL,YAAY,CAACH,KAAKJ,WAAYoD,GAC/C9C,EAAcC,EAAYD,YAAYF,KAAKJ,WAE3CsD,EAAqB,IAAI5C,SAC3B,SAAC6C,EAAoBC,GACjBjD,EAAYkD,WAAa,kBAAMF,KAC/BhD,EAAY6B,QAAU,SAAClD,GAWnBsE,EAAmBtE,EAAMwE,OAAehB,WAzKhE,kBA8KmB,CAACpC,EAAagD,IA9KjC,6DAiLkBlD,KAAKiD,sBAjLvB,iCAkLmBjD,KAAKC,iBAAiB+C,IAlLzC,gGAsL2B9C,EAA6BJ,EAAaC,GAC7D,OAAO,IAAIO,SAAQ,SAACqB,EAAgBC,GAChC,IACI,IAAMxB,EAAUF,EAAYqD,IAAIxD,EAAOD,GACvCM,EAAQ2B,UAAYJ,EACpBvB,EAAQ4B,QAAUJ,EACpB,MAAOU,GAEL,OADApC,EAAYC,YAAYqD,QACjB5B,EAAcU,SA9LrC,wCAmM8BpC,EAA6BJ,GACnD,OAAO,IAAIQ,SAAQ,SAACqB,EAAgBC,GAChC,IAAMxB,EAAUF,EAAYuD,OAAO3D,GACnCM,EAAQ2B,UAAYJ,EACpBvB,EAAQ4B,QAAUJ,OAvM9B,qCA2M2B1B,EAA6BJ,GAChD,OAAO,IAAIQ,SAAQ,SAACqB,EAAgBC,GAChC,IAAMxB,EAAUF,EAAYwD,IAAI5D,GAChCM,EAAQ2B,UAAY,kBAAMJ,EAAevB,EAAQgB,SACjDhB,EAAQ4B,QAAU,kBAAMJ,EAAcxB,EAAQkC,aA/M1D,wCAmN8BpC,GACtB,OAAO,IAAII,SAAQ,SAACqB,EAAgBC,GAChC,IAAMR,EAAoB,GACpBhB,EAAUF,EAAYyD,aAG5BvD,EAAQ2B,UAAY,WAChB,IAAM6B,EAAoCxD,EAAQgB,OAElD,GAAIwC,EAGA,OAFAxC,EAAOwC,EAAO9D,KAAiB8D,EAAO7D,WACtC6D,EAAOC,WAIXlC,EAAeP,IAEnBhB,EAAQ4B,QAAUJ,SApO9B,KCFakC,EAGT,WAAYC,GAAkB,yBAFvBA,aAEsB,OADtBC,WACsB,EACzBhE,KAAK+D,QAAUA,EACf/D,KAAKgE,MAAQ,ICLRC,EAMT,WAAYC,EAAcC,GAAuB,yBAL1CD,UAKyC,OAJzCE,WAIyC,OAHzCC,qBAGyC,OAFzCC,sBAEyC,EAC5CtE,KAAKkE,KAAOA,EACZlE,KAAKoE,MAAQD,EACbnE,KAAKqE,gBAAkB,EACvBrE,KAAKsE,iBAAmB,GCXnBC,EAIT,WAAYR,EAAiBG,EAAcM,GAAiB,yBAHrDT,aAGoD,OAFpDG,UAEoD,OADpDM,YACoD,EACvDxE,KAAK+D,QAAUA,EACf/D,KAAKkE,KAAOA,EACZlE,KAAKwE,OAASA,GCPTC,EAMT,WACIV,EACAG,EACAE,EACAC,EACAC,GACD,yBAXIP,aAWL,OAVKG,UAUL,OATKE,WASL,OARKC,qBAQL,OAPKC,sBAOL,EACEtE,KAAK+D,QAAUA,EACf/D,KAAKkE,KAAOA,EACZlE,KAAKoE,MAAQA,EACbpE,KAAKqE,gBAAkBA,EACvBrE,KAAKsE,iBAAmBA,GCcnBI,EAAkB,I,iDAhCnBC,UAAY,IAAIjF,EAAoC,aAAc,a,oDACrDqE,EAAiBG,G,6FAAcM,E,+BAAiB,EAC3DI,EAAab,EAAQc,OAJJ,QAImCX,G,mBAC9BlE,KAAK2E,UAAUG,QAAQF,I,6BAAiBvC,E,YAGhE0C,MAAM,oDAEN/E,KAAK2E,UAAUK,QAAQJ,EAAY,IAAIL,EAAoBR,EAASG,EAAMM,I,kFAI1DT,EAAiBG,G,+EAC/BpE,EAAMiE,EAAQc,OAfG,QAe4BX,G,mBAC7ClE,KAAK2E,UAAUM,WAAWnF,I,oFAGViE,EAAiBG,EAAcM,G,+EAC/C1E,EAAMiE,EAAQc,OApBG,QAoB4BX,G,mBAC7ClE,KAAK2E,UAAUM,WAAWnF,I,iCAC1BE,KAAKkF,QAAQnB,EAASG,EAAMM,I,wLAGfxE,KAAK2E,UAAUQ,Y,OAA5BtE,E,OACAmD,EAAgC,G,cACpBnD,G,qDAAPf,E,gBACPkE,E,oBAAiBhE,KAAK2E,UAAUG,QAAQhF,I,yBAAlCsF,K,gEAEHpB,G,6ECVFqB,EAAqB,I,kNAnBCC,MAAM,2D,cAAvBC,E,yBAECA,EAASC,GACVD,EAASE,OACTnF,QAAQ4B,OAAR,uDACoDqD,EAASG,WAD7D,O,+NASJC,EAAWC,KAAKC,UAAUC,GAC1BC,EAAWH,KAAKI,MAAML,G,kBACrBrF,QAAQ2B,QAAQ8D,EAASE,U,+CCwL3BC,EAAkB,I,iDA7LnBvB,UAAY,IAAIjF,EAAsC,aAAc,iB,2KAGpEyG,EAAwB,GACtBC,EAAW,IAAIC,SACfC,EAA0BF,EAASG,cAAc,U,mBAEnClB,EAAmBmB,gB,OAGvC,IAHMC,E,OAEAC,EAAa,GACVC,EAAQ,EAAGA,EAAQF,EAAMG,OAAQD,IACtCD,EAAWtB,KAAKqB,EAAME,GAAOE,SAGjC,IAASF,EAAQ,EAAGA,EAAQD,EAAWE,OAAQD,IACrCG,EAAUJ,EAAWC,GAC3BL,EAAWS,mBAAmB,aAAcD,GAMhD,IAJAV,EAASY,YAAYV,GAEfW,EAAeb,EAASc,uBAAuB,QAE5CP,EAAQ,EAAGA,EAAQM,EAAaL,OAAQD,IAAS,CAKtD,IAJMxJ,EAAO8J,EAAaN,GAEtBQ,EAAW,IAAIrD,EAAS,IACtBsD,EAAaC,MAAMC,KAAKnK,EAAKiK,YAC1BG,EAAI,EAAGA,EAAIH,EAAWR,OAAQW,IACtBH,EAAWG,GAGE,OAFpBT,EAAU3J,EAAKiK,WAAWG,IAEpBjJ,WAAkD,KAA7BwI,EAAQU,UAAUC,SAC3CN,EAASnD,MAAM4C,OAAS,IACxBT,EAAWnG,KAAK0H,YAAYP,EAAUhB,IAE1CgB,EAAW,IAAIrD,EAASgD,EAAQU,UAAUC,SAE1CN,EAASpD,SAAiC,MAAtB+C,EAAQxI,YACtBqJ,EAAWP,EAAWR,OAASW,EAAI,GAAKH,EAAWR,OAASW,EAAI,GAChEK,EAAQR,EAAWS,MAAMN,EAAI,EAAGA,EAAII,EAAW,IAC/CG,EAAa9H,KAAK+H,eAAeH,KAEnCT,EAASnD,MAAMoB,KAAK0C,IAI5BX,EAASnD,MAAM4C,OAAS,IACxBT,EAAWnG,KAAK0H,YAAYP,EAAUhB,I,OAI9CA,EAAS6B,MAAK,SAACxG,EAAGyG,GACd,IAAMC,EAAI1G,EAAEuC,QAAQoE,cACdC,EAAIH,EAAElE,QAAQoE,cACpB,OAAID,EAAIE,GACI,EAERF,EAAIE,EACG,EAEJ,K,KAIXpI,K,oBAAgCA,KAAKqI,oBAAoBlC,I,gCAApDmC,qB,gBAEL9F,QAAQ+F,IAAIpC,G,kBAELA,G,4FAMsBA,G,oGACLzB,EAAgB8D,Y,cAAlCC,E,OACAC,EAA+C,GACrDD,EAAUE,SAAQ,SAACC,GACf,IAAMC,EAAc1C,EAAS2C,MAAK,SAAC9H,GAAD,OAAUA,EAAK+C,UAAY6E,EAAS7E,WACtE,GAAI8E,EAAa,CACb,IAAMf,EAAae,EAAY7E,MAAM8E,MAAK,SAACC,GAAD,OAAUA,EAAK7E,OAAS0E,EAAS1E,QACvE4D,GACAY,EAAqBtD,KACjB,IAAIX,EACAoE,EAAY9E,QACZ+D,EAAW5D,KACX4D,EAAW1D,MACX0D,EAAWzD,gBACXyD,EAAWxD,uB,kBAMxBoE,G,kFAGwBM,G,mEAElB,IAAIC,MAAOC,mBAAmB,UAS9B,IAAID,MAAOE,mBAAmB,S,yEAI3BhC,EAAqBiC,GACrC,IAAMzC,EAAQyC,EAAUC,WAAU,SAACrI,GAC/B,OAAOA,EAAK+C,UAAYoD,EAASpD,WAkBrC,OAhBAoD,EAASnD,MAAMgE,MAAK,SAACxG,EAAGyG,GACpB,IAAMC,EAAI1G,EAAE0C,KAAKiE,cACXC,EAAIH,EAAE/D,KAAKiE,cACjB,OAAID,EAAIE,GACI,EAERF,EAAIE,EACG,EAEJ,KAEPzB,GAAS,EACTyC,EAAUzC,GAAO3C,MAAQoF,EAAUzC,GAAO3C,MAAMa,OAAOsC,EAASnD,OAEhEoF,EAAUhE,KAAK+B,GAEZiC,I,qCAGYxB,GACnB,GAA0B,IAAtBA,EAAM,GAAG0B,SACT,OAAO,KAEX,IAAMC,EAAWC,OAAO5B,EAAM,GAAG6B,WAAWhC,OAC5C,GAAI8B,EAAS3C,OAAS,EAClB,OAAO,KAQX,IANA,IAAM8C,EAAY1J,KAAK2J,aAAa/B,GAE9BmB,EAAO,IAAI9E,EAAWsF,EAAUG,GAElCE,GAAa,EACbC,GAAc,EACTlD,EAAQ,EAAGA,EAAQiB,EAAMhB,OAAS,EAAGD,IAAS,CACnD,IAAMG,EAAUc,EAAMjB,GAatB,IAX2B,MAAtBG,EAAQxI,WAA2C,MAAtBwI,EAAQxI,YACtCwI,EAAQU,UAAUC,OAAOb,OAAS,IAE9BmC,EAAK1E,iBACL0E,EAAKzE,iBAAmBwF,OAAOhD,EAAQU,UAAUC,QACjDoC,GAAc,IAEdd,EAAK1E,gBAAkByF,OAAOhD,EAAQU,UAAUC,QAChDmC,GAAa,IAGjBA,GAAcC,EACd,OAAOd,EAMf,OAHAA,EAAK1E,gBAAkB,EACvB0E,EAAKzE,iBAAmB,EAEjByE,I,mCAGUnB,GAEjB,IADA,IAAI7H,EAAgB,EACX4G,EAAQ,EAAGA,EAAQiB,EAAMhB,OAAS,EAAGD,IAAS,CACnD,IAAMG,EAAUc,EAAMjB,GACtB,GAA0B,MAAtBG,EAAQxI,UACR,OAAOyB,EAEX,IAAMgK,EAAeD,OAAOhD,EAAQU,UAAUC,QACzCuC,MAAMD,KACPhK,GAAS+J,OAAOC,IAGxB,OAAOhK,M,MChLFkK,EAAmB,I,wGAlBCjG,G,sGACDkC,EAAgBmC,oBAAoBrE,I,cAAtDkG,E,0BACkBxF,EAAgB8D,Y,cAAlCC,E,OAEF0B,EAAgB,EACpBD,EAAUvB,SAAQ,SAACI,GACf,IAAMH,EAAWH,EAAUK,MAAK,SAAC9H,GAC7B,OAAOA,EAAK+C,UAAYgF,EAAKhF,SAAW/C,EAAKkD,OAAS6E,EAAK7E,QAGzDkG,GAAc,IAAMrB,EAAK1E,iBAAmB,IAC5CgG,EAAgBtB,EAAK3E,MAAQgG,EAC7BE,GAAgBvB,EAAK3E,MAAQiG,IAAkBzB,EAAWA,EAASpE,OAAS,GAClF2F,GAAgBG,K,kBAEbH,G,+CCVFI,EAAb,YACI,WAAYC,GAAuB,IAAD,8BAC9B,4CAAMA,KACDC,MAAQ,CAAEC,WAAY,GAFG,EADtC,mLAO4BT,EAAiBU,gBAAgB3K,KAAKwK,MAAMxG,QAPxE,OAOc4G,EAPd,OAQQ5K,KAAK6K,SAAS,CAAEH,WAAYE,IARpC,gFAYQ,OAAO,uBAAKE,MAAO,CAAElN,MAAO,WAAaoC,KAAKyK,MAAMC,gBAZ5D,GAA6B1M,a,6HCFvBjB,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACT6L,KAAM,CACFgC,YAAa9N,EAAM+N,QAAQ,SAU1BC,GAAoD,SAAC,GAAqB,IAAnBlC,EAAkB,EAAlBA,KAAMmC,EAAY,EAAZA,MAChEnN,EAAUhB,KAEhB,OACI,kBAACoO,EAAA,EAAD,CAAUC,QAAM,EAAC9M,UAAWP,EAAQgL,KAAMlK,QAAS,kBAAMqM,EAAMnC,EAAK7E,QAChE,kBAACmH,EAAA,EAAD,KACI,kBAAC,KAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAASxC,EAAK7E,SCZ3BsH,GAA4D,SAAC,GAGnE,IAFHrE,EAEE,EAFFA,SACAsE,EACE,EADFA,UACE,EACsBzN,IAAMC,UAAS,GADrC,mBACKG,EADL,KACWsN,EADX,KAOIR,EAAQ,SAAC3B,GACXkC,EAAUtE,EAASpD,QAASwF,IAEhC,OACI,yBAAKzJ,IAAKqH,EAASpD,SACf,kBAACoH,EAAA,EAAD,CAAUL,MAAO,CAAElN,MAAO,SAAWwN,QAAM,EAACvM,QAThC,WAChB6M,GAAStN,KASD,kBAACiN,EAAA,EAAD,KACI,kBAAC,IAAD,OAEJ,kBAACC,EAAA,EAAD,CAAcC,QAASpE,EAASpD,UAC/B3F,EAAO,kBAAC,IAAD,MAAiB,kBAAC,IAAD,OAE5B+I,EAASnD,MAAMlD,KAAI,SAACiI,GACjB,OACI,kBAAC4C,EAAA,EAAD,CAAU7L,IAAKiJ,EAAK7E,KAAM0H,GAAIxN,EAAMyN,QAAQ,OAAOC,eAAa,GAC5D,kBAACC,EAAA,EAAD,CAAMC,UAAU,MAAMC,gBAAc,GAChC,kBAAC,GAAD,CAAUlD,KAAMA,EAAMmC,MAAOA,WCpCnDnO,GAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACF+O,MAAO,OACPC,SAAU,IACV7O,gBAAiBL,EAAMmP,QAAQC,WAAWC,MAC1CC,UAAW,eAUVC,GAAwD,SAAC,GAA6B,IAA3BrG,EAA0B,EAA1BA,SAAUsF,EAAgB,EAAhBA,UACxE1N,EAAUhB,KAEhB,OACI,kBAACgP,EAAA,EAAD,CACIC,UAAU,MACVS,kBAAgB,wBAChBC,UACI,kBAACC,EAAA,EAAD,CAAeX,UAAU,MAAM/M,GAAG,yBAAlC,kBAIJX,UAAWP,EAAQZ,MAElBgJ,EAASrF,KAAI,SAACqG,EAAqBR,GAChC,OAAO,kBAAC,GAAD,CAAc7G,IAAK6G,EAAOQ,SAAUA,EAAUsE,UAAWA,SC9BnEmB,GAAb,iLAEQ,OACI,uBAAK9B,MAAO,CAAE+B,QAAS,OAAQC,SAAU,WACrC,gBAAC,GAAD,CAAY3G,SAAUnG,KAAKwK,MAAMxG,MAAOyH,UAAWzL,KAAKkF,aAJxE,8BAS0BnB,EAAiBG,GAT3C,4FAUcQ,EAAgBQ,QAAQnB,EAASG,IAV/C,4CAA8BlG,a,wCCOjB+O,GAAb,YACI,WAAYvC,GAA4B,IAAD,8BACnC,4CAAMA,KAgCFwC,SAAW,WACf,EAAKxC,MAAMwC,SAAS,EAAKxC,MAAMzG,QAAS,EAAKyG,MAAMtG,OAlChB,EAqC/B+I,OAAS,WACb,EAAKzC,MAAM0C,eAAe,EAAK1C,MAAMzG,QAAS,EAAKyG,MAAMtG,KAAM,EAAKuG,MAAMjG,SApC1E,EAAKiG,MAAQ,CACTjG,OAAQ,EAAKgG,MAAMhG,QAHY,EAD3C,sEAQqB,IAAD,OACZ,OACI,gBAAC2G,EAAA,EAAD,CAAUC,QAAM,EAACN,MAAO,CAAEqC,WAAY,IAClC,gBAAC7B,EAAA,EAAD,CAAcC,QAASvL,KAAKwK,MAAMtG,OAClC,gBAACkJ,GAAA,EAAD,CACItC,MAAO,CAAEqB,SAAU,IACnBkB,MAAM,UACN3O,QAAQ,WACR4O,KAAK,SACLC,gBAAiB,CACbC,QAAQ,GAEZzN,MAAOC,KAAKyK,MAAMjG,OAClBiJ,SAAU,SAAC3O,GAAW,IACViB,EAAUjB,EAAMwE,OAAhBvD,MACR,EAAK8K,SAAS,CAAErG,OAAQsF,OAAO/J,MAEnCkN,OAAQjN,KAAKiN,SAEjB,gBAACtO,EAAA,EAAD,CAAYC,KAAK,MAAMI,aAAW,cAAcH,QAASmB,KAAKgN,UAC1D,gBAAC,KAAD,YA5BpB,GAAkChP,aCJrB0P,GAAb,YACI,WAAYlD,GAAa,IAAD,8BACpB,4CAAMA,KA8CFmD,WAAa,SAAC5J,EAAiBgF,GACnCrE,EAAgBiJ,WAAW5J,EAASgF,GAAM7H,MAAK,WAC3C,EAAK0M,kBAjDW,EAqDhBC,aAAe,SAAC9J,EAAiBgF,EAAcvE,GACnDE,EAAgBmJ,aAAa9J,EAASgF,EAAMvE,GAAQtD,MAAK,WACrD,EAAK0M,kBArDT,EAAKnD,MAAQ,CACTzG,MAAO,IAHS,EAD5B,mLAQ2BU,EAAgB8D,YAR3C,OAQcsF,EARd,OASQ9N,KAAK6K,SAAS,CAAE7G,MAAOhE,KAAK+N,gBAAgBD,KATpD,gFAYc,IAAD,OACG9J,EAAUhE,KAAKyK,MAAfzG,MACR,OACI,yBAAK8G,MAAO,CAAE+B,QAAS,OAAQC,SAAU,WACrC,kBAACf,EAAA,EAAD,CACIjB,MAAO,CACHoB,MAAO,OACPC,SAAU,IACV7O,gBAAiB,QACjBiP,UAAW,UAEfP,UAAU,MACVS,kBAAgB,yBAEf7L,OAAOC,KAAKmD,GAAOlD,KAAI,SAACiD,GAAD,OACpB,yBAAKjE,IAAKiE,GACN,kBAACoH,EAAA,EAAD,CAAUL,MAAO,CAAElN,MAAO,UACtB,kBAAC0N,EAAA,EAAD,CAAcC,QAASxH,KAE1BC,EAAMD,GAASjD,KAAI,SAACiI,GAAD,OAChB,kBAAC,GAAD,CACIjJ,IAAKiJ,EAAK7E,KACVH,QAASA,EACTG,KAAM6E,EAAK7E,KACXM,OAAQuE,EAAKvE,OACbwI,SAAU,EAAKW,WACfT,eAAgB,EAAKW,0BAtCzD,sIA6D2BnJ,EAAgB8D,YA7D3C,OA6DcsF,EA7Dd,OA8DQ9N,KAAK6K,SAAS,CACV7G,MAAOhE,KAAK+N,gBAAgBD,KA/DxC,uFAmE4B9J,GACpB,OAAOgK,aAAQhK,EAAO,eApE9B,GAA+BhG,IAAMiQ,WCDxBC,GAAb,iLACqB,IAAD,OACZ,OACI,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAAC7D,GAAD,OAAW,gBAAC,EAAD,CAASxG,MAAO,EAAKwG,MAAMxG,WACpE,gBAAC,IAAD,CAAOoK,KAAK,SAASC,OAAQ,SAAC7D,GAAD,OAAW,gBAAC,GAAD,CAAUxG,MAAO,EAAKwG,MAAMxG,WACpE,gBAAC,IAAD,CAAOoK,KAAK,YAAYpC,UAAW0B,KAHvC,YAHZ,GAA0B1P,a,UCEbsQ,GAAb,YACI,WAAY9D,GAAa,IAAD,8BACpB,4CAAMA,KACDC,MAAQ,CACTtE,SAAU,IAHM,EAD5B,+JASQnG,KATR,mBASwCkG,EAAgBqI,eATxD,yBASwBpI,SATxB,WASa0E,SATb,gGAaQ,OACI,gBAAC,IAAD,KACI,gBAAC/M,EAAD,MACA,gBAAC0Q,GAAA,EAAD,CAAW1D,MAAO,CAAE2D,UAAW,KAC1BzO,KAAKyK,MAAMtE,SAASS,OAAS,GAAK,gBAAC,GAAD,CAAM5C,MAAOhE,KAAKyK,MAAMtE,iBAjB/E,GAA+BnI,aCN/B0Q,IAASL,OAAO,6BACZ,kBAAC,GAAD,OACIjI,SAASuI,eAAe,SpBiI1B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5N,MAAK,SAAA6N,GACjCA,EAAaC,iB","file":"static/js/main.bdf479b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        appbar: {\n            backgroundColor: 'blue',\n            position: 'fixed',\n            height: 56,\n        },\n        title: {\n            textAlign: 'center',\n            flexGrow: 1,\n        },\n        link: {\n            color: 'rgba(0, 0, 0, 0.87)',\n            textDecoration: 'none',\n        },\n    }),\n);\n\nexport default function MenuAppBar() {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n\n    function handleMenu(event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(event.currentTarget);\n    }\n\n    function handleClose() {\n        setAnchorEl(null);\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar className={classes.appbar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Fondkollen\n                    </Typography>\n                    <div>\n                        <IconButton\n                            edge=\"end\"\n                            onClick={handleMenu}\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={open}\n                            onClose={handleClose}\n                        >\n                            <MenuItem onClick={handleClose}>\n                                <NavLink className={classes.link} to={'/funds'}>\n                                    Välj Fonder...\n                                </NavLink>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose}>\n                                <NavLink className={classes.link} to={'/holdings'}>\n                                    Innehav...\n                                </NavLink>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose}>\n                                <NavLink className={classes.link} to={'/'}>\n                                    Status...\n                                </NavLink>\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","export interface IItems<T> {\n    [key: string]: T;\n}\n\nexport interface IItem<T> {\n    key: string;\n    value: T;\n}\n\nexport class KeyValueStore<T> {\n    constructor(\n        private dbName: string,\n        private storeName: string,\n        private indexedDB = window.indexedDB,\n    ) {}\n\n    public async setItem(key: string, value: T): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = this.makePutRequest(objectStore, key, value);\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    public async setItems(items: { [key: string]: T }): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const requests = Object.keys(items).map((key) =>\n            this.makePutRequest(objectStore, key, items[key]),\n        );\n        await Promise.all([transaction, ...requests]);\n        objectStore.transaction.db.close();\n    }\n\n    public async getItem(key: string): Promise<T> {\n        const [objectStore, transaction] = await this.startTransaction();\n        const request = this.makeGetRequest(objectStore, key);\n        const [, item] = await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n        return item;\n    }\n\n    public async getItems(keys: string[] | null = null): Promise<IItems<T>> {\n        const [objectStore, transaction] = await this.startTransaction();\n\n        // no keys means get all\n        if (keys === null) {\n            return await this.makeGetAllRequest(objectStore);\n        }\n\n        const requests = keys.map((key) => {\n            return this.makeGetRequest(objectStore, key).then((value: T) => {\n                return { key, value } as IItem<T>;\n            });\n        });\n\n        const convertToObject = (result: Array<IItem<T>>) =>\n            result.reduce(\n                (object, property) => {\n                    object[property.key] = property.value;\n                    return object;\n                },\n                {} as IItems<T>,\n            );\n\n        objectStore.transaction.db.close();\n\n        return await Promise.all(requests)\n            .then(convertToObject)\n            .then(async (result) => {\n                await transaction;\n                return result;\n            });\n    }\n\n    public async removeItem(key: string): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = this.makeDeleteRequest(objectStore, key);\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    public async removeItems(keys: string[]): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const requests = keys.map((key) => this.makeDeleteRequest(objectStore, key));\n        await Promise.all([transaction, ...requests]);\n        objectStore.transaction.db.close();\n    }\n\n    public async clear(): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = new Promise((resolveRequest, rejectRequest) => {\n            const clearRequest = objectStore.clear();\n            clearRequest.onsuccess = resolveRequest;\n            clearRequest.onerror = rejectRequest;\n        });\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    private initializeDatabase(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => this.openDatabase(resolve, reject));\n    }\n\n    private openDatabase(\n        resolve: (value?: IDBDatabase) => void,\n        reject: (reason: any) => void,\n        version?: number,\n    ) {\n        // No indexedDB available, e.g. private tab in Edge\n        if (!this.indexedDB) {\n            return reject('No indexedDB support');\n        }\n\n        const request: IDBOpenDBRequest =\n            version === undefined\n                ? this.indexedDB.open(this.dbName)\n                : this.indexedDB.open(this.dbName, version);\n\n        request.onerror = () => reject(request.error);\n        // Logging for debug purposes, we should be able to recover after being blocked\n        request.onblocked = () => console.error('KeyValueStore blocked, store:', this.storeName);\n        request.onsuccess = () => {\n            const db = request.result;\n\n            db.onabort = reject;\n            db.onerror = reject;\n            db.onversionchange = db.close;\n\n            // The current database hasn't got the objectStore, close the database\n            // and open a new with higher version to trigger onupgradeneeded.\n            if (!this.hasObjectStore(db, this.storeName)) {\n                db.close();\n                this.openDatabase(resolve, reject, db.version + 1);\n                return;\n            }\n\n            resolve(db);\n        };\n        request.onupgradeneeded = () => {\n            const db = request.result;\n\n            if (this.hasObjectStore(db, this.storeName)) {\n                return;\n            }\n\n            db.createObjectStore(this.storeName);\n        };\n    }\n\n    private hasObjectStore(db: IDBDatabase, storeName: string) {\n        const objectStores: DOMStringList = db.objectStoreNames;\n\n        return objectStores.contains(storeName);\n    }\n\n    private async startTransaction(\n        mode: IDBTransactionMode = 'readonly',\n    ): Promise<[IDBObjectStore, Promise<Event>]> {\n        // Rejections from initialization should be cought by the consumers of the public methods\n        const db = await this.initializeDatabase();\n\n        try {\n            const transaction = db.transaction([this.storeName], mode);\n            const objectStore = transaction.objectStore(this.storeName);\n\n            const transactionPromise = new Promise<Event>(\n                (resolveTransaction, rejectTransaction) => {\n                    transaction.oncomplete = () => resolveTransaction();\n                    transaction.onerror = (event) => {\n                        /**\n                         * This step relies on any since the types lie from what we have been\n                         * able to tell. The transaction.error property that is documented on\n                         * MDN seems to be always null so either the unit tests mocking db\n                         * don't adhere to the API correctly (most probable cause) or something\n                         * else is wrong here.\n                         *\n                         * There are tests validating this in case the API would change but\n                         * those tests won't detect if the types changes.\n                         */\n                        rejectTransaction((event.target as any).error);\n                    };\n                },\n            );\n\n            return [objectStore, transactionPromise];\n        } catch (error) {\n            // Transaction failed, e.g. beacause it's closed, try to reinitialize the database\n            await this.initializeDatabase();\n            return this.startTransaction(mode);\n        }\n    }\n\n    private makePutRequest(objectStore: IDBObjectStore, key: string, value: T): Promise<Event> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            try {\n                const request = objectStore.put(value, key);\n                request.onsuccess = resolveRequest;\n                request.onerror = rejectRequest;\n            } catch (error) {\n                objectStore.transaction.abort();\n                return rejectRequest(error);\n            }\n        });\n    }\n\n    private makeDeleteRequest(objectStore: IDBObjectStore, key: string): Promise<Event> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const request = objectStore.delete(key);\n            request.onsuccess = resolveRequest;\n            request.onerror = rejectRequest;\n        });\n    }\n\n    private makeGetRequest(objectStore: IDBObjectStore, key: string): Promise<T> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const request = objectStore.get(key);\n            request.onsuccess = () => resolveRequest(request.result);\n            request.onerror = () => rejectRequest(request.error);\n        });\n    }\n\n    private makeGetAllRequest(objectStore: IDBObjectStore): Promise<IItems<T>> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const result: IItems<T> = {};\n            const request = objectStore.openCursor();\n\n            // onsuccess will fire for each property in the database, accumulating data in result\n            request.onsuccess = () => {\n                const cursor: IDBCursorWithValue | null = request.result;\n\n                if (cursor) {\n                    result[cursor.key as string] = cursor.value;\n                    cursor.continue();\n                    return;\n                }\n\n                resolveRequest(result);\n            };\n            request.onerror = rejectRequest;\n        });\n    }\n}\n","import { IFundDetail } from '.';\n\nexport interface IFundInfo {\n    company: string;\n    funds: IFundDetail[];\n}\n\nexport class FundInfo implements IFundInfo {\n    public company: string;\n    public funds: IFundDetail[];\n    constructor(company: string) {\n        this.company = company;\n        this.funds = [];\n    }\n}\n","export interface IFundDetail {\n    name: string;\n    price: number;\n    dailyPercentage: number;\n    yearlyPercentage: number;\n}\n\nexport class FundDetail implements IFundDetail {\n    public name: string;\n    public price: number;\n    public dailyPercentage: number;\n    public yearlyPercentage: number;\n\n    constructor(name: string, currentValue: number) {\n        this.name = name;\n        this.price = currentValue;\n        this.dailyPercentage = 0;\n        this.yearlyPercentage = 0;\n    }\n}\n","export interface IUserFundStorageItem {\n    company: string;\n    name: string;\n    shares: number;\n}\n\nexport class UserFundStorageItem implements IUserFundStorageItem {\n    public company: string;\n    public name: string;\n    public shares: number;\n    constructor(company: string, name: string, shares: number) {\n        this.company = company;\n        this.name = name;\n        this.shares = shares;\n    }\n}\n","import { IFundDetail } from './IFundDetail';\n\nexport interface IFundInfoStorageItem extends IFundDetail {\n    company: string;\n}\n\nexport class FundInfoStorageItem implements IFundInfoStorageItem {\n    public company: string;\n    public name: string;\n    public price: number;\n    public dailyPercentage: number;\n    public yearlyPercentage: number;\n    constructor(\n        company: string,\n        name: string,\n        price: number,\n        dailyPercentage: number,\n        yearlyPercentage: number,\n    ) {\n        this.company = company;\n        this.name = name;\n        this.price = price;\n        this.dailyPercentage = dailyPercentage;\n        this.yearlyPercentage = yearlyPercentage;\n    }\n}\n","import { KeyValueStore } from '../utils';\nimport { IUserFundStorageItem, UserFundStorageItem } from '../models';\n\nconst Company_Fund_Separator = '#/#/#';\nclass UserFundService {\n    private fundStore = new KeyValueStore<IUserFundStorageItem>('fondkollen', 'userFunds');\n    public async addFund(company: string, name: string, shares: number = 0): Promise<void> {\n        const newFundKey = company.concat(Company_Fund_Separator, name);\n        const existingFund = (await this.fundStore.getItem(newFundKey)) !== undefined;\n\n        if (existingFund) {\n            alert('Den här fonden finns redan bland dina fonder!');\n        } else {\n            this.fundStore.setItem(newFundKey, new UserFundStorageItem(company, name, shares));\n        }\n    }\n\n    public async deleteFund(company: string, name: string) {\n        const key = company.concat(Company_Fund_Separator, name);\n        await this.fundStore.removeItem(key);\n    }\n\n    public async updateShares(company: string, name: string, shares: number) {\n        const key = company.concat(Company_Fund_Separator, name);\n        await this.fundStore.removeItem(key);\n        await this.addFund(company, name, shares);\n    }\n    public async getFunds(): Promise<IUserFundStorageItem[]> {\n        const keys = await this.fundStore.getItems();\n        const funds: IUserFundStorageItem[] = [];\n        for (const key in keys) {\n            funds.push(await this.fundStore.getItem(key));\n        }\n        return funds;\n    }\n}\n\nexport const userFundService = new UserFundService();\n","import * as mockData from '../mocks/238.json';\nclass TextTvCommunicator {\n    public async getFundPages(): Promise<any> {\n        try {\n            const response = await fetch('https://api.texttv.nu/api/get/238-244?app=texttvnu.web');\n            // const response = await fetch('https://api.texttv.nu/api/get/238?app=texttvnu.web');\n            return response.ok\n                ? response.json()\n                : Promise.reject(\n                      `Cannot communicate with the REST API server (${response.statusText})`,\n                  );\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    public async getFundPagesMock(): Promise<any> {\n        const jsonData = JSON.stringify(mockData);\n        const fundData = JSON.parse(jsonData);\n        return Promise.resolve(fundData.default);\n    }\n}\n\nexport const textTvCommunicator = new TextTvCommunicator();\n","import { KeyValueStore } from '../utils';\nimport { textTvCommunicator } from '../communicators';\nimport {\n    FundInfo,\n    IFundInfo,\n    IFundDetail,\n    FundDetail,\n    IFundInfoStorageItem,\n    FundInfoStorageItem,\n} from '../models';\nimport * as moment from 'moment';\nimport { userFundService } from './UserFund.service';\n\nclass FundInfoService {\n    private fundStore = new KeyValueStore<IFundInfoStorageItem[]>('fondkollen', 'dailySnapshot');\n\n    public async getFundInfo(): Promise<IFundInfo[]> {\n        let allFunds: IFundInfo[] = [];\n        const document = new Document();\n        const topElement: HTMLElement = document.createElement('rootEl');\n\n        const pages = await textTvCommunicator.getFundPages();\n        // const pages = await textTvCommunicator.getFundPagesMock();\n        const allContent = [];\n        for (let index = 0; index < pages.length; index++) {\n            allContent.push(pages[index].content);\n        }\n\n        for (let index = 0; index < allContent.length; index++) {\n            const element = allContent[index];\n            topElement.insertAdjacentHTML('afterbegin', element);\n        }\n        document.appendChild(topElement);\n\n        const rootElements = document.getElementsByClassName('root');\n\n        for (let index = 0; index < rootElements.length; index++) {\n            const root = rootElements[index];\n\n            let fundInfo = new FundInfo('');\n            const childNodes = Array.from(root.childNodes);\n            for (let j = 0; j < childNodes.length; j++) {\n                const node = childNodes[j];\n                const element = root.childNodes[j] as Element;\n                // console.log(node);\n                if (element.className === 'G' && element.innerHTML.trim() !== '') {\n                    if (fundInfo.funds.length > 0) {\n                        allFunds = this.addFundInfo(fundInfo, allFunds);\n                    }\n                    fundInfo = new FundInfo(element.innerHTML.trim());\n                }\n                if (fundInfo.company && element.className === 'W') {\n                    const maxItems = childNodes.length - j < 20 ? childNodes.length - j : 20;\n                    const nodes = childNodes.slice(j - 1, j + maxItems - 2);\n                    const fundDetail = this.getFundDetails(nodes);\n                    if (fundDetail) {\n                        fundInfo.funds.push(fundDetail);\n                    }\n                }\n            }\n            if (fundInfo.funds.length > 0) {\n                allFunds = this.addFundInfo(fundInfo, allFunds);\n            }\n        }\n\n        allFunds.sort((a, b) => {\n            const x = a.company.toLowerCase();\n            const y = b.company.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n\n        // Here we add our daily record\n        this.addFundInfoToStorage(await this.getFundStorageItems(allFunds));\n\n        console.log(allFunds);\n\n        return allFunds;\n    }\n\n    /**\n     * Get only items the user has interest in (shares)\n     */\n    public async getFundStorageItems(allFunds: IFundInfo[]): Promise<IFundInfoStorageItem[]> {\n        const userFunds = await userFundService.getFunds();\n        const fundInfoStorageItems: IFundInfoStorageItem[] = [];\n        userFunds.forEach((userFund) => {\n            const companyItem = allFunds.find((item) => item.company === userFund.company);\n            if (companyItem) {\n                const fundDetail = companyItem.funds.find((fund) => fund.name === userFund.name);\n                if (fundDetail) {\n                    fundInfoStorageItems.push(\n                        new FundInfoStorageItem(\n                            companyItem.company,\n                            fundDetail.name,\n                            fundDetail.price,\n                            fundDetail.dailyPercentage,\n                            fundDetail.yearlyPercentage,\n                        ),\n                    );\n                }\n            }\n        });\n        return fundInfoStorageItems;\n    }\n\n    private async addFundInfoToStorage(filteredFunds: IFundInfoStorageItem[]) {\n        // If after kl 18:30 set next bankday with slutkurser (Current)\n        const time = new Date().toLocaleTimeString('sv-se');\n        // if (time > '18:30') {\n        //     await this.fundStore.setItem(\n        //         new Date('Bankday').toLocaleDateString('sv-se'),\n        //         filteredFunds,\n        //     );\n        // }\n\n        // Justera kurserna på dagens datum och spara\n        const date = new Date().toLocaleDateString('sv-se');\n        // await this.fundStore.setItem(new Date().toLocaleDateString('sv-se'), filteredFunds);\n    }\n\n    private addFundInfo(fundInfo: IFundInfo, fundInfos: IFundInfo[]): IFundInfo[] {\n        const index = fundInfos.findIndex((item) => {\n            return item.company === fundInfo.company;\n        });\n        fundInfo.funds.sort((a, b) => {\n            const x = a.name.toLowerCase();\n            const y = b.name.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n        if (index >= 0) {\n            fundInfos[index].funds = fundInfos[index].funds.concat(fundInfo.funds);\n        } else {\n            fundInfos.push(fundInfo);\n        }\n        return fundInfos;\n    }\n\n    private getFundDetails(nodes: ChildNode[]): IFundDetail | null {\n        if (nodes[0].nodeType !== 3) {\n            return null;\n        }\n        const fundName = String(nodes[0].nodeValue).trim();\n        if (fundName.length < 1) {\n            return null;\n        }\n        const fundValue = this.getFundValue(nodes);\n\n        const fund = new FundDetail(fundName, fundValue);\n\n        let dailyFound = false;\n        let yearlyFound = false;\n        for (let index = 2; index < nodes.length - 1; index++) {\n            const element = nodes[index] as Element;\n            if (\n                (element.className === 'C' || element.className === 'Y') &&\n                element.innerHTML.trim().length > 0\n            ) {\n                if (fund.dailyPercentage) {\n                    fund.yearlyPercentage = Number(element.innerHTML.trim());\n                    yearlyFound = true;\n                } else {\n                    fund.dailyPercentage = Number(element.innerHTML.trim());\n                    dailyFound = true;\n                }\n            }\n            if (dailyFound && yearlyFound) {\n                return fund;\n            }\n        }\n        fund.dailyPercentage = 0;\n        fund.yearlyPercentage = 0;\n\n        return fund;\n    }\n\n    private getFundValue(nodes: ChildNode[]): number {\n        let value: number = 0.0;\n        for (let index = 1; index < nodes.length - 1; index++) {\n            const element = nodes[index] as Element;\n            if (element.className !== 'W') {\n                return value;\n            }\n            const elementValue = Number(element.innerHTML.trim());\n            if (!isNaN(elementValue)) {\n                value += Number(elementValue);\n            }\n        }\n        return value;\n    }\n}\n\nexport const fundInfoService = new FundInfoService();\n","import { userFundService } from '.';\nimport { IFundInfo } from '../models';\nimport { fundInfoService } from './FundInfo.service';\n\nclass FinancialService {\n    public async getDailyRevenue(funds: IFundInfo[]): Promise<number> {\n        const fundItems = await fundInfoService.getFundStorageItems(funds);\n        const userFunds = await userFundService.getFunds();\n\n        let total: number = 0;\n        fundItems.forEach((fund) => {\n            const userFund = userFunds.find((item) => {\n                return item.company === fund.company && item.name === fund.name;\n            });\n\n            const percentage = (100 + fund.dailyPercentage) / 100;\n            const originalValue = fund.price / percentage;\n            const dailyRevenue = (fund.price - originalValue) * (userFund ? userFund.shares : 0);\n            total = total + dailyRevenue;\n        });\n        return total;\n    }\n}\nexport const financialService = new FinancialService();\n","import * as React from 'react';\nimport { financialService } from '../services';\nimport { IFundInfo } from '../models';\n\nexport interface IRevenueProps {\n    funds: IFundInfo[];\n}\ninterface IRevenueState {\n    dailyTotal: number;\n}\nexport class Revenue extends React.Component<IRevenueProps, IRevenueState> {\n    constructor(props: IRevenueProps) {\n        super(props);\n        this.state = { dailyTotal: 0 };\n    }\n\n    public async componentDidMount() {\n        const daily = await financialService.getDailyRevenue(this.props.funds);\n        this.setState({ dailyTotal: daily });\n    }\n\n    public render() {\n        return <div style={{ color: 'yellow' }}>{this.state.dailyTotal}</div>;\n    }\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport LocalAtm from '@material-ui/icons/LocalAtm';\nimport { IFundDetail } from '../../models';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        fund: {\n            paddingLeft: theme.spacing(4),\n        },\n    }),\n);\n\nexport interface IFundItemProps {\n    fund: IFundDetail;\n    onAdd(fundName: string): void;\n}\n\nexport const FundItem: React.FunctionComponent<IFundItemProps> = ({ fund, onAdd }) => {\n    const classes = useStyles();\n\n    return (\n        <ListItem button className={classes.fund} onClick={() => onAdd(fund.name)}>\n            <ListItemIcon>\n                <LocalAtm />\n            </ListItemIcon>\n            <ListItemText primary={fund.name} />\n        </ListItem>\n    );\n};\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { List } from '@material-ui/core';\nimport { IFundInfo } from '../../models';\nimport { FundItem } from './FundItem';\n\nexport interface IFundInfoItemProps {\n    fundInfo: IFundInfo;\n    onAddFund(compmany: string, fundName: string): void;\n}\n\nexport const FundInfoItem: React.FunctionComponent<IFundInfoItemProps> = ({\n    fundInfo,\n    onAddFund,\n}) => {\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    const onAdd = (fundName: string) => {\n        onAddFund(fundInfo.company, fundName);\n    };\n    return (\n        <div key={fundInfo.company}>\n            <ListItem style={{ color: 'green' }} button onClick={handleClick}>\n                <ListItemIcon>\n                    <BusinessCenterIcon />\n                </ListItemIcon>\n                <ListItemText primary={fundInfo.company} />\n                {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            {fundInfo.funds.map((fund) => {\n                return (\n                    <Collapse key={fund.name} in={open} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            <FundItem fund={fund} onAdd={onAdd} />\n                        </List>\n                    </Collapse>\n                );\n            })}\n        </div>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport { IFundInfo } from '../../models';\nimport { FundInfoItem } from './FundInfoItem';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n            overflowY: 'scroll',\n        },\n    }),\n);\n\nexport interface IFundPickerProps {\n    allFunds: IFundInfo[];\n    onAddFund(company: string, fundName: string): void;\n}\n\nexport const FundPicker: React.FunctionComponent<IFundPickerProps> = ({ allFunds, onAddFund }) => {\n    const classes = useStyles();\n\n    return (\n        <List\n            component=\"nav\"\n            aria-labelledby=\"nested-list-subheader\"\n            subheader={\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                    Välj Fonder\n                </ListSubheader>\n            }\n            className={classes.root}\n        >\n            {allFunds.map((fundInfo: IFundInfo, index) => {\n                return <FundInfoItem key={index} fundInfo={fundInfo} onAddFund={onAddFund} />;\n            })}\n        </List>\n    );\n};\n","import * as React from 'react';\nimport { IFundInfo } from '../models';\nimport { FundPicker } from './FundPicker';\nimport { userFundService } from '../services';\n\nexport interface IFundViewProps {\n    funds: IFundInfo[];\n}\nexport class FundView extends React.Component<IFundViewProps> {\n    public render() {\n        return (\n            <div style={{ display: 'flex', overflow: 'hidden' }}>\n                <FundPicker allFunds={this.props.funds} onAddFund={this.addFund} />\n            </div>\n        );\n    }\n\n    private async addFund(company: string, name: string) {\n        await userFundService.addFund(company, name);\n    }\n}\n","import * as React from 'react';\nimport { ListItem, ListItemText, TextField, IconButton } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nexport interface IUserFundItemProps {\n    company: string;\n    name: string;\n    shares: number;\n    onDelete(company: string, name: string): void;\n    onSharesChange(company: string, name: string, shares: number): void;\n}\n\ninterface IUserFundItemState {\n    shares: number;\n}\n\nexport class UserFundItem extends React.Component<IUserFundItemProps, IUserFundItemState> {\n    constructor(props: IUserFundItemProps) {\n        super(props);\n        this.state = {\n            shares: this.props.shares,\n        };\n    }\n\n    public render() {\n        return (\n            <ListItem button style={{ marginLeft: 4 }}>\n                <ListItemText primary={this.props.name} />\n                <TextField\n                    style={{ maxWidth: 80 }}\n                    label=\"Andelar\"\n                    variant=\"outlined\"\n                    type=\"number\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    value={this.state.shares}\n                    onChange={(event) => {\n                        const { value } = event.target;\n                        this.setState({ shares: Number(value) });\n                    }}\n                    onBlur={this.onBlur}\n                />\n                <IconButton edge=\"end\" aria-label=\"delete fund\" onClick={this.onDelete}>\n                    <DeleteIcon />\n                </IconButton>\n            </ListItem>\n        );\n    }\n\n    private onDelete = () => {\n        this.props.onDelete(this.props.company, this.props.name);\n    };\n\n    private onBlur = () => {\n        this.props.onSharesChange(this.props.company, this.props.name, this.state.shares);\n    };\n}\n","import React from 'react';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\nimport { groupBy } from 'lodash-es';\nimport { UserFundItem } from './FundHolding/FundHoldingItem';\nimport { userFundService } from '../services';\nimport { IUserFundStorageItem } from '../models';\n\nexport interface IFundTableState {\n    funds: _.Dictionary<IUserFundStorageItem[]>;\n}\n\nexport class FundTable extends React.Component<{}, IFundTableState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            funds: {},\n        };\n    }\n    public async componentDidMount() {\n        const data = await userFundService.getFunds();\n        this.setState({ funds: this.getGroupedFunds(data) });\n    }\n\n    render() {\n        const { funds } = this.state;\n        return (\n            <div style={{ display: 'flex', overflow: 'hidden' }}>\n                <List\n                    style={{\n                        width: '100%',\n                        maxWidth: 360,\n                        backgroundColor: 'white',\n                        overflowY: 'scroll',\n                    }}\n                    component=\"nav\"\n                    aria-labelledby=\"nested-list-subheader\"\n                >\n                    {Object.keys(funds).map((company) => (\n                        <div key={company}>\n                            <ListItem style={{ color: 'green' }}>\n                                <ListItemText primary={company} />\n                            </ListItem>\n                            {funds[company].map((fund) => (\n                                <UserFundItem\n                                    key={fund.name}\n                                    company={company}\n                                    name={fund.name}\n                                    shares={fund.shares}\n                                    onDelete={this.deleteFund}\n                                    onSharesChange={this.updateShares}\n                                />\n                            ))}\n                        </div>\n                    ))}\n                </List>\n            </div>\n        );\n    }\n\n    private deleteFund = (company: string, fund: string) => {\n        userFundService.deleteFund(company, fund).then(() => {\n            this.updateFunds();\n        });\n    };\n\n    private updateShares = (company: string, fund: string, shares: number) => {\n        userFundService.updateShares(company, fund, shares).then(() => {\n            this.updateFunds();\n        });\n    };\n\n    private async updateFunds() {\n        const data = await userFundService.getFunds();\n        this.setState({\n            funds: this.getGroupedFunds(data),\n        });\n    }\n\n    private getGroupedFunds(funds: IUserFundStorageItem[]) {\n        return groupBy(funds, 'company');\n    }\n}\n","import * as React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport { Revenue, FundView } from './components';\nimport { IFundInfo } from './models';\nimport { FundTable } from './components/FundTable';\n\nexport interface IMainProps {\n    funds: IFundInfo[];\n}\nexport class Main extends React.Component<IMainProps> {\n    public render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" render={(props) => <Revenue funds={this.props.funds} />} />\n                <Route path=\"/funds\" render={(props) => <FundView funds={this.props.funds} />} />\n                <Route path=\"/holdings\" component={FundTable} />} />\n            </Switch>\n        );\n    }\n}\n","import * as React from 'react';\nimport { MemoryRouter } from 'react-router';\nimport { IFundInfo } from './models';\nimport { Main } from './Main';\nimport MenuAppBar from './components/MenuAppBar';\nimport Container from '@material-ui/core/Container';\nimport { fundInfoService } from './services';\n\ninterface IAppLoaderState {\n    allFunds: IFundInfo[];\n}\n\nexport class AppLoader extends React.Component<{}, IAppLoaderState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            allFunds: [],\n        };\n    }\n\n    public async componentDidMount() {\n        this.setState({ allFunds: await fundInfoService.getFundInfo() });\n    }\n\n    public render() {\n        return (\n            <MemoryRouter>\n                <MenuAppBar />\n                <Container style={{ marginTop: 56 }}>\n                    {this.state.allFunds.length > 0 && <Main funds={this.state.allFunds} />}\n                </Container>\n            </MemoryRouter>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { AppLoader } from './AppLoader';\n\nReactDOM.render(<div>\n    <AppLoader />\n</div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}