{"version":3,"sources":["models/index.ts","models/FundInfo.ts","models/FundDetails.ts","serviceWorker.ts","components/MenuAppBar.tsx","utils/KeyValueStore.ts","services/FundRecord.service.ts","communicators/TextTv.communicator.ts","services/FundInfo.service.ts","services/Financial.service.ts","components/Revenue.tsx","components/FundPicker/FundItem.tsx","components/FundPicker/FundInfoItem.tsx","components/FundPicker/FundPicker.tsx","components/FundView.tsx","components/FundHolding/FundHoldingItem.tsx","components/FundTable.tsx","Main.tsx","AppLoader.tsx","index.tsx"],"names":["FundInfo","company","funds","this","FundInfoRecord","fund","FundDetail","name","currentValue","dailyPercentage","yearlyPercentage","holdings","Boolean","window","location","hostname","match","useStyles","makeStyles","theme","createStyles","root","flexGrow","appbar","backgroundColor","position","height","title","textAlign","link","color","textDecoration","MenuAppBar","classes","React","useState","anchorEl","setAnchorEl","open","handleClose","className","AppBar","Toolbar","Typography","variant","IconButton","edge","onClick","event","currentTarget","aria-label","id","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","onClose","MenuItem","to","KeyValueStore","dbName","storeName","indexedDB","key","value","startTransaction","objectStore","transaction","request","makePutRequest","Promise","all","db","close","items","requests","Object","keys","map","makeGetRequest","item","makeGetAllRequest","then","convertToObject","result","reduce","object","property","a","async","makeDeleteRequest","resolveRequest","rejectRequest","clearRequest","clear","onsuccess","onerror","resolve","reject","openDatabase","version","undefined","error","onblocked","console","onabort","onversionchange","hasObjectStore","onupgradeneeded","createObjectStore","objectStoreNames","contains","mode","initializeDatabase","transactionPromise","resolveTransaction","rejectTransaction","oncomplete","target","put","abort","delete","get","openCursor","cursor","continue","fundRecordService","fundStore","newFundKey","concat","getItem","alert","setItem","removeItem","getItems","fundRecord","createFundRecord","existingCompany","find","holdingInfo","push","sort","b","x","fundName","toLowerCase","y","log","info","split","textTvCommunicator","fetch","response","ok","json","statusText","fundInfoService","allFunds","document","Document","topElement","createElement","getFundPages","pages","allContent","index","length","content","element","insertAdjacentHTML","appendChild","rootElements","getElementsByClassName","fundInfo","j","childElementCount","children","innerHTML","trim","addFundInfo","fundDetail","getFundDetails","addFundInfoToStorage","getFunds","userFunds","fundInfoRecords","record","companyItem","holding","Date","toLocaleTimeString","toLocaleDateString","fundInfos","findIndex","elements","fundHeading","getFundNameAndValue","Number","heading","getElementsByTagName","pos","decimals","charAt","isNumeric","slice","aPos","indexOf","isNaN","parseFloat","isFinite","financialService","fundRecords","total","percentage","originalValue","dailyRevenue","Revenue","props","state","dailyTotal","getDailyStatus","daily","setState","style","paddingLeft","spacing","FundItem","onAdd","ListItem","button","ListItemIcon","ListItemText","primary","FundInfoItem","onAddFund","setOpen","Collapse","in","timeout","unmountOnExit","List","component","disablePadding","width","maxWidth","palette","background","paper","overflowY","FundPicker","aria-labelledby","subheader","ListSubheader","FundView","display","overflow","addFund","FundHoldingItem","onDelete","onHoldingsBlur","onHoldingsChange","internalHoldings","marginLeft","TextField","label","type","InputLabelProps","shrink","onChange","onBlur","FundTable","deleteFund","updateFunds","changeHoldings","data","renderHolding","Component","Main","exact","path","render","AppLoader","getFundInfo","Container","marginTop","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c07852e9.chunk.js","sourcesContent":["export * from './FundInfo';\nexport * from './FundDetails';\nexport * from './IFundRecord';\n","import { IFundDetail } from '.';\nimport { IFundRecord } from './IFundRecord';\n\nexport interface IFundInfo {\n    company: string;\n    funds: IFundDetail[];\n}\n\nexport class FundInfo implements IFundInfo {\n    public company: string;\n    public funds: IFundDetail[];\n    constructor(company: string) {\n        this.company = company;\n        this.funds = [];\n    }\n}\n\nexport interface IFundInfoRecord {\n    company: string;\n    fund: IFundDetail;\n}\n\nexport class FundInfoRecord implements IFundInfoRecord {\n    public company: string;\n    public fund: IFundDetail;\n    constructor(company: string, fund: IFundDetail) {\n        this.company = company;\n        this.fund = fund;\n    }\n}\n","export interface IFundDetail {\n    name: string;\n    currentValue: number;\n    dailyPercentage: number;\n    yearlyPercentage: number;\n    holdings: number;\n}\n\nexport class FundDetail implements IFundDetail {\n    public name: string;\n    public currentValue: number;\n    public dailyPercentage: number;\n    public yearlyPercentage: number;\n    public holdings: number;\n\n    constructor(name: string, currentValue: number) {\n        this.name = name;\n        this.currentValue = currentValue;\n        this.dailyPercentage = 0;\n        this.yearlyPercentage = 0;\n        this.holdings = 0;\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Menu from '@material-ui/core/Menu';\nimport { NavLink } from 'react-router-dom';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        appbar: {\n            backgroundColor: 'blue',\n            position: 'fixed',\n            height: 56,\n        },\n        title: {\n            textAlign: 'center',\n            flexGrow: 1,\n        },\n        link: {\n            color: 'rgba(0, 0, 0, 0.87)',\n            textDecoration: 'none',\n        },\n    }),\n);\n\nexport default function MenuAppBar() {\n    const classes = useStyles();\n    const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n    const open = Boolean(anchorEl);\n\n    function handleMenu(event: React.MouseEvent<HTMLElement>) {\n        setAnchorEl(event.currentTarget);\n    }\n\n    function handleClose() {\n        setAnchorEl(null);\n    }\n\n    return (\n        <div className={classes.root}>\n            <AppBar className={classes.appbar}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        Fondkollen\n                    </Typography>\n                    <div>\n                        <IconButton\n                            edge=\"end\"\n                            onClick={handleMenu}\n                            color=\"inherit\"\n                            aria-label=\"menu\"\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Menu\n                            id=\"menu-appbar\"\n                            anchorEl={anchorEl}\n                            anchorOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            keepMounted\n                            transformOrigin={{\n                                vertical: 'top',\n                                horizontal: 'right',\n                            }}\n                            open={open}\n                            onClose={handleClose}\n                        >\n                            <MenuItem onClick={handleClose}>\n                                <NavLink className={classes.link} to={'/funds'}>\n                                    Välj Fonder...\n                                </NavLink>\n                            </MenuItem>\n                            <MenuItem onClick={handleClose}>\n                                <NavLink className={classes.link} to={'/holdings'}>\n                                    Mitt Innehav...\n                                </NavLink>\n                            </MenuItem>\n                        </Menu>\n                    </div>\n                </Toolbar>\n            </AppBar>\n        </div>\n    );\n}\n","export interface IItems<T> {\n    [key: string]: T;\n}\n\nexport interface IItem<T> {\n    key: string;\n    value: T;\n}\n\nexport class KeyValueStore<T> {\n    constructor(\n        private dbName: string,\n        private storeName: string,\n        private indexedDB = window.indexedDB,\n    ) {}\n\n    public async setItem(key: string, value: T): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = this.makePutRequest(objectStore, key, value);\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    public async setItems(items: { [key: string]: T }): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const requests = Object.keys(items).map((key) =>\n            this.makePutRequest(objectStore, key, items[key]),\n        );\n        await Promise.all([transaction, ...requests]);\n        objectStore.transaction.db.close();\n    }\n\n    public async getItem(key: string): Promise<T> {\n        const [objectStore, transaction] = await this.startTransaction();\n        const request = this.makeGetRequest(objectStore, key);\n        const [, item] = await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n        return item;\n    }\n\n    public async getItems(keys: string[] | null = null): Promise<IItems<T>> {\n        const [objectStore, transaction] = await this.startTransaction();\n\n        // no keys means get all\n        if (keys === null) {\n            return await this.makeGetAllRequest(objectStore);\n        }\n\n        const requests = keys.map((key) => {\n            return this.makeGetRequest(objectStore, key).then((value: T) => {\n                return { key, value } as IItem<T>;\n            });\n        });\n\n        const convertToObject = (result: Array<IItem<T>>) =>\n            result.reduce(\n                (object, property) => {\n                    object[property.key] = property.value;\n                    return object;\n                },\n                {} as IItems<T>,\n            );\n\n        objectStore.transaction.db.close();\n\n        return await Promise.all(requests)\n            .then(convertToObject)\n            .then(async (result) => {\n                await transaction;\n                return result;\n            });\n    }\n\n    public async removeItem(key: string): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = this.makeDeleteRequest(objectStore, key);\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    public async removeItems(keys: string[]): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const requests = keys.map((key) => this.makeDeleteRequest(objectStore, key));\n        await Promise.all([transaction, ...requests]);\n        objectStore.transaction.db.close();\n    }\n\n    public async clear(): Promise<void> {\n        const [objectStore, transaction] = await this.startTransaction('readwrite');\n        const request = new Promise((resolveRequest, rejectRequest) => {\n            const clearRequest = objectStore.clear();\n            clearRequest.onsuccess = resolveRequest;\n            clearRequest.onerror = rejectRequest;\n        });\n        await Promise.all([transaction, request]);\n        objectStore.transaction.db.close();\n    }\n\n    private initializeDatabase(): Promise<IDBDatabase> {\n        return new Promise((resolve, reject) => this.openDatabase(resolve, reject));\n    }\n\n    private openDatabase(\n        resolve: (value?: IDBDatabase) => void,\n        reject: (reason: any) => void,\n        version?: number,\n    ) {\n        // No indexedDB available, e.g. private tab in Edge\n        if (!this.indexedDB) {\n            return reject('No indexedDB support');\n        }\n\n        const request: IDBOpenDBRequest =\n            version === undefined\n                ? this.indexedDB.open(this.dbName)\n                : this.indexedDB.open(this.dbName, version);\n\n        request.onerror = () => reject(request.error);\n        // Logging for debug purposes, we should be able to recover after being blocked\n        request.onblocked = () => console.error('KeyValueStore blocked, store:', this.storeName);\n        request.onsuccess = () => {\n            const db = request.result;\n\n            db.onabort = reject;\n            db.onerror = reject;\n            db.onversionchange = db.close;\n\n            // The current database hasn't got the objectStore, close the database\n            // and open a new with higher version to trigger onupgradeneeded.\n            if (!this.hasObjectStore(db, this.storeName)) {\n                db.close();\n                this.openDatabase(resolve, reject, db.version + 1);\n                return;\n            }\n\n            resolve(db);\n        };\n        request.onupgradeneeded = () => {\n            const db = request.result;\n\n            if (this.hasObjectStore(db, this.storeName)) {\n                return;\n            }\n\n            db.createObjectStore(this.storeName);\n        };\n    }\n\n    private hasObjectStore(db: IDBDatabase, storeName: string) {\n        const objectStores: DOMStringList = db.objectStoreNames;\n\n        return objectStores.contains(storeName);\n    }\n\n    private async startTransaction(\n        mode: IDBTransactionMode = 'readonly',\n    ): Promise<[IDBObjectStore, Promise<Event>]> {\n        // Rejections from initialization should be cought by the consumers of the public methods\n        const db = await this.initializeDatabase();\n\n        try {\n            const transaction = db.transaction([this.storeName], mode);\n            const objectStore = transaction.objectStore(this.storeName);\n\n            const transactionPromise = new Promise<Event>(\n                (resolveTransaction, rejectTransaction) => {\n                    transaction.oncomplete = () => resolveTransaction();\n                    transaction.onerror = (event) => {\n                        /**\n                         * This step relies on any since the types lie from what we have been\n                         * able to tell. The transaction.error property that is documented on\n                         * MDN seems to be always null so either the unit tests mocking db\n                         * don't adhere to the API correctly (most probable cause) or something\n                         * else is wrong here.\n                         *\n                         * There are tests validating this in case the API would change but\n                         * those tests won't detect if the types changes.\n                         */\n                        rejectTransaction((event.target as any).error);\n                    };\n                },\n            );\n\n            return [objectStore, transactionPromise];\n        } catch (error) {\n            // Transaction failed, e.g. beacause it's closed, try to reinitialize the database\n            await this.initializeDatabase();\n            return this.startTransaction(mode);\n        }\n    }\n\n    private makePutRequest(objectStore: IDBObjectStore, key: string, value: T): Promise<Event> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            try {\n                const request = objectStore.put(value, key);\n                request.onsuccess = resolveRequest;\n                request.onerror = rejectRequest;\n            } catch (error) {\n                objectStore.transaction.abort();\n                return rejectRequest(error);\n            }\n        });\n    }\n\n    private makeDeleteRequest(objectStore: IDBObjectStore, key: string): Promise<Event> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const request = objectStore.delete(key);\n            request.onsuccess = resolveRequest;\n            request.onerror = rejectRequest;\n        });\n    }\n\n    private makeGetRequest(objectStore: IDBObjectStore, key: string): Promise<T> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const request = objectStore.get(key);\n            request.onsuccess = () => resolveRequest(request.result);\n            request.onerror = () => rejectRequest(request.error);\n        });\n    }\n\n    private makeGetAllRequest(objectStore: IDBObjectStore): Promise<IItems<T>> {\n        return new Promise((resolveRequest, rejectRequest) => {\n            const result: IItems<T> = {};\n            const request = objectStore.openCursor();\n\n            // onsuccess will fire for each property in the database, accumulating data in result\n            request.onsuccess = () => {\n                const cursor: IDBCursorWithValue | null = request.result;\n\n                if (cursor) {\n                    result[cursor.key as string] = cursor.value;\n                    cursor.continue();\n                    return;\n                }\n\n                resolveRequest(result);\n            };\n            request.onerror = rejectRequest;\n        });\n    }\n}\n","import { IFundDetail, IFundRecord } from '../models';\nimport { KeyValueStore, IItems } from '../utils';\n\nconst Company_Fund_Separator = '#/#/#';\nclass FundRecordService {\n    private fundStore = new KeyValueStore<number>('fondkollen', 'fundRecords');\n    public async addFund(company: string, name: string): Promise<void> {\n        const newFundKey = company.concat(Company_Fund_Separator, name);\n        const existingFund = (await this.fundStore.getItem(newFundKey)) !== undefined;\n\n        if (existingFund) {\n            alert('Den här fonden finns redan bland dina fonder!');\n        } else {\n            this.fundStore.setItem(newFundKey, 0);\n        }\n    }\n\n    public async deleteFund(company: string, name: string) {\n        const key = company.concat(Company_Fund_Separator, name);\n        await this.fundStore.removeItem(key);\n    }\n\n    public async changeHoldings(company: string, name: string, holdings: number) {\n        const key = company.concat(Company_Fund_Separator, name);\n        await this.fundStore.removeItem(key);\n        await this.fundStore.setItem(key, holdings);\n    }\n    public async getFunds(): Promise<IFundRecord[]> {\n        const keys = await this.fundStore.getItems();\n        const funds: IFundRecord[] = [];\n        for (const key in keys) {\n            const fundRecord = this.createFundRecord(key, await this.fundStore.getItem(key));\n            const existingCompany = funds.find((fund) => fund.company === fundRecord.company);\n            if (existingCompany) {\n                existingCompany.holdingInfo.push(fundRecord.holdingInfo[0]);\n                existingCompany.holdingInfo.sort((a, b) => {\n                    const x = a.fundName.toLowerCase();\n                    const y = b.fundName.toLowerCase();\n                    if (x < y) {\n                        return -1;\n                    }\n                    if (x > y) {\n                        return 1;\n                    }\n                    return 0;\n                });\n            } else {\n                funds.push(fundRecord);\n            }\n        }\n        funds.sort((a, b) => {\n            const x = a.company.toLowerCase();\n            const y = b.company.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n        console.log(funds);\n        return funds;\n    }\n\n    private createFundRecord(key: string, value: number): IFundRecord {\n        const info = key.split(Company_Fund_Separator);\n        return { company: info[0], holdingInfo: [{ fundName: info[1], holdings: value }] };\n    }\n}\n\nexport const fundRecordService = new FundRecordService();\n\n// public setCustomerInfo(projectId: Id, value: string): Promise<void> {\n//     return this.customerInfoStore.setItem(projectId, value);\n// }\n\n// public async getCustomerInfo(projectId: Id): Promise<string> {\n//     const project = await this.projectService.get(projectId);\n//     let customerInfo = await this.customerInfoStore.getItem(project.id);\n//     if (customerInfo) {\n//         return customerInfo;\n//     }\n\n//     // Item could have asd1 key if migrated project\n//     if (project.origin && project.origin.source === 'asd1') {\n//         customerInfo = await this.customerInfoStore.getItem(project.origin.id);\n\n//         // Update key with asd2 project id if found\n//         if (customerInfo) {\n//             const preparedFor = JSON.parse(customerInfo);\n//             this.customerInfoStore.setItem(projectId, preparedFor);\n//             this.customerInfoStore.removeItem(project.origin.id);\n//             return preparedFor;\n//         }\n//     }\n\n//     // We always default to an empty string for validation simplicity\n//     // in the rest of the application.\n//     return '';\n// }\n\n// public async clearCustomerInfo(): Promise<void> {\n//     return this.customerInfoStore.clear();\n// }\n","import * as React from 'react';\nclass TextTvCommunicator {\n    public async getFundPages(): Promise<any> {\n        try {\n            const response = await fetch('http://api.texttv.nu/api/get/238-244?app=texttvnu.web');\n            return response.ok\n                ? response.json()\n                : Promise.reject(\n                      `Cannot communicate with the REST API server (${response.statusText})`,\n                  );\n        } catch (error) {\n            throw error;\n        }\n    }\n}\n\nexport const textTvCommunicator = new TextTvCommunicator();\n","import { KeyValueStore, IItems } from '../utils';\nimport { textTvCommunicator } from '../communicators';\nimport {\n    FundInfo,\n    IFundInfo,\n    IFundDetail,\n    FundDetail,\n    IFundInfoRecord,\n    FundInfoRecord,\n} from '../models';\nimport { fundRecordService } from './FundRecord.service';\n\nclass FundInfoService {\n    private fundStore = new KeyValueStore<IFundInfoRecord[]>('fondkollen', 'fundInfo');\n\n    public async getFundInfo(): Promise<IFundInfo[]> {\n        let allFunds: IFundInfo[] = [];\n        const document = new Document();\n        const topElement: HTMLElement = document.createElement('rootEl');\n\n        const pages = await textTvCommunicator.getFundPages();\n        // const pages = fundData.default;\n        const allContent = [];\n        for (let index = 0; index < pages.length; index++) {\n            allContent.push(pages[index].content);\n        }\n\n        for (let index = 0; index < allContent.length; index++) {\n            const element = allContent[index];\n            topElement.insertAdjacentHTML('afterbegin', element);\n        }\n        document.appendChild(topElement);\n\n        const rootElements = document.getElementsByClassName('root');\n\n        for (let index = 0; index < rootElements.length; index++) {\n            const root = rootElements[index];\n\n            let fundInfo = new FundInfo('');\n            for (let j = 0; j < root.childElementCount; j++) {\n                const element = root.children[j];\n                if (element.className === 'G' && element.innerHTML.trim() !== '') {\n                    if (fundInfo.funds.length > 0) {\n                        allFunds = this.addFundInfo(fundInfo, allFunds);\n                    }\n                    fundInfo = new FundInfo(element.innerHTML.trim());\n                }\n                if (\n                    fundInfo.company &&\n                    element.className === 'W' &&\n                    element.innerHTML.trim() !== ''\n                ) {\n                    const fundDetail = this.getFundDetails([\n                        root.children[j],\n                        root.children[j + 1],\n                        root.children[j + 2],\n                    ]);\n                    if (fundDetail) {\n                        fundInfo.funds.push(fundDetail);\n                    }\n                }\n            }\n            if (fundInfo.funds.length > 0) {\n                allFunds = this.addFundInfo(fundInfo, allFunds);\n            }\n        }\n\n        allFunds.sort((a, b) => {\n            const x = a.company.toLowerCase();\n            const y = b.company.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n\n        this.addFundInfoToStorage(allFunds);\n\n        return allFunds;\n    }\n\n    private async addFundInfoToStorage(allFunds: IFundInfo[]) {\n        const userFunds = await fundRecordService.getFunds();\n        let fundInfoRecords: IFundInfoRecord[] = [];\n        userFunds.map((record) => {\n            const companyItem = allFunds.find((item) => item.company === record.company);\n            if (companyItem) {\n                record.holdingInfo.map((holding) => {\n                    const fundDetail = companyItem.funds.find(\n                        (fund) => fund.name === holding.fundName,\n                    );\n                    if (fundDetail) {\n                        fundInfoRecords.push(\n                            new FundInfoRecord(companyItem.company, {\n                                ...fundDetail,\n                                holdings: holding.holdings,\n                            }),\n                        );\n                    }\n                });\n            }\n        });\n        // If after kl 18:30 set next bankday with slutkurser (Current)\n        const time = new Date().toLocaleTimeString('sv-se');\n        if (time > '18:30') {\n            await this.fundStore.setItem(\n                new Date('Bankday').toLocaleDateString('sv-se'),\n                fundInfoRecords,\n            );\n        }\n\n        // Justera kurserna på dagens datum och spara\n        const date = new Date().toLocaleDateString('sv-se');\n        await this.fundStore.setItem(new Date().toLocaleDateString('sv-se'), fundInfoRecords);\n    }\n\n    private addFundInfo(fundInfo: IFundInfo, fundInfos: IFundInfo[]): IFundInfo[] {\n        const index = fundInfos.findIndex((item) => {\n            return item.company === fundInfo.company;\n        });\n        fundInfo.funds.sort((a, b) => {\n            const x = a.name.toLowerCase();\n            const y = b.name.toLowerCase();\n            if (x < y) {\n                return -1;\n            }\n            if (x > y) {\n                return 1;\n            }\n            return 0;\n        });\n        if (index >= 0) {\n            fundInfos[index].funds = fundInfos[index].funds.concat(fundInfo.funds);\n        } else {\n            fundInfos.push(fundInfo);\n        }\n        return fundInfos;\n    }\n\n    private getFundDetails(elements: Element[]): IFundDetail | null {\n        const fundHeading = this.getFundNameAndValue(elements[0]);\n        const fund = new FundDetail(fundHeading.name!, fundHeading.currentValue!);\n\n        for (let index = elements.length - 1; index > 0; index--) {\n            const element = elements[index];\n            if (element.className === 'C' || element.className === 'Y') {\n                if (fund.yearlyPercentage) {\n                    fund.dailyPercentage = Number(element.innerHTML.trim());\n                } else {\n                    fund.yearlyPercentage = Number(element.innerHTML.trim());\n                }\n            }\n        }\n        return fund.yearlyPercentage ? fund : null;\n    }\n\n    private getFundNameAndValue(element: Element): Partial<IFundDetail> {\n        const heading = element.innerHTML.trim();\n\n        // Special check for avoiding spans containing <a> elements with the integer part of the value we're looking for\n        const children = element.getElementsByTagName('a');\n        if (children.length > 0) {\n            let pos = heading.length - 1;\n            let decimals = heading.charAt(pos);\n            while (this.isNumeric(decimals) && pos >= 0) {\n                decimals = heading.charAt(--pos) + decimals;\n            }\n            const value = children[0].innerHTML + decimals.slice(1);\n            const aPos = heading.indexOf('<');\n            return {\n                name: heading.slice(0, aPos).trim(),\n                currentValue: Number(value),\n            };\n        }\n\n        let pos = heading.length - 1;\n        let value = heading.charAt(pos);\n        while (this.isNumeric(value) && pos >= 0) {\n            value = heading.charAt(--pos) + value;\n        }\n        return {\n            name: heading.slice(0, pos + 1).trim(),\n            currentValue: Number(heading.slice(pos + 1, heading.length)),\n        };\n    }\n\n    private isNumeric(value: any) {\n        if (value.slice(0, 1) === ' ') {\n            return false;\n        }\n        var count = (value.match(/\\./g) || []).length;\n        if (count > 1) {\n            return false;\n        }\n        return !isNaN(parseFloat(value)) && isFinite(value);\n    }\n}\n\nexport const fundInfoService = new FundInfoService();\n","import { KeyValueStore } from '../utils';\nimport { IFundInfoRecord } from '../models';\n\nclass FinancialService {\n    private fundStore = new KeyValueStore<IFundInfoRecord[]>('fondkollen', 'fundInfo');\n    public async getDailyStatus(): Promise<number> {\n        const fundRecords = await this.fundStore.getItem(new Date().toLocaleDateString('sv-se'));\n        let total: number = 0;\n        fundRecords.map((item) => {\n            const percentage = (100 + item.fund.dailyPercentage) / 100;\n            const originalValue = item.fund.currentValue / percentage;\n            const dailyRevenue = (item.fund.currentValue - originalValue) * item.fund.holdings;\n            total = total + dailyRevenue;\n        });\n        return total;\n    }\n}\nexport const financialService = new FinancialService();\n","import * as React from 'react';\nimport { financialService } from '../services';\n\ninterface IRevenueState {\n    dailyTotal: number;\n}\nexport class Revenue extends React.Component<{}, IRevenueState> {\n    constructor(props: any) {\n        super(props);\n        this.state = { dailyTotal: 0 };\n    }\n\n    public async componentDidMount() {\n        const daily = await financialService.getDailyStatus();\n        this.setState({ dailyTotal: daily });\n    }\n\n    public render() {\n        return <div style={{ color: 'yellow' }}>{this.state.dailyTotal}</div>;\n    }\n}\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport LocalAtm from '@material-ui/icons/LocalAtm';\nimport { IFundDetail } from '../../models/FundDetails';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        fund: {\n            paddingLeft: theme.spacing(4),\n        },\n    }),\n);\n\nexport interface IFundItemProps {\n    fund: IFundDetail;\n    onAdd(fundName: string): void;\n}\n\nexport const FundItem: React.FunctionComponent<IFundItemProps> = ({ fund, onAdd }) => {\n    const classes = useStyles();\n\n    return (\n        <ListItem button className={classes.fund} onClick={() => onAdd(fund.name)}>\n            <ListItemIcon>\n                <LocalAtm />\n            </ListItemIcon>\n            <ListItemText primary={fund.name} />\n        </ListItem>\n    );\n};\n","import React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Collapse from '@material-ui/core/Collapse';\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\nimport ExpandLess from '@material-ui/icons/ExpandLess';\nimport ExpandMore from '@material-ui/icons/ExpandMore';\nimport { List } from '@material-ui/core';\nimport { IFundInfo } from '../../models';\nimport { FundItem } from './FundItem';\n\nexport interface IFundInfoItemProps {\n    fundInfo: IFundInfo;\n    onAddFund(compmany: string, fundName: string): void;\n}\n\nexport const FundInfoItem: React.FunctionComponent<IFundInfoItemProps> = ({\n    fundInfo,\n    onAddFund,\n}) => {\n    const [hoveredFund, setHoveredFund] = React.useState('');\n    const [open, setOpen] = React.useState(false);\n\n    const handleClick = () => {\n        setOpen(!open);\n    };\n\n    const updateHoveredFund = (name: string) => {\n        setHoveredFund(name);\n    };\n\n    const resetHoveredFund = () => {\n        setHoveredFund('');\n    };\n\n    const onAdd = (fundName: string) => {\n        onAddFund(fundInfo.company, fundName);\n    };\n    return (\n        <div key={fundInfo.company}>\n            <ListItem style={{ color: 'green' }} button onClick={handleClick}>\n                <ListItemIcon>\n                    <BusinessCenterIcon />\n                </ListItemIcon>\n                <ListItemText primary={fundInfo.company} />\n                {open ? <ExpandLess /> : <ExpandMore />}\n            </ListItem>\n            {fundInfo.funds.map((fund) => {\n                return (\n                    <Collapse key={fund.name} in={open} timeout=\"auto\" unmountOnExit>\n                        <List component=\"div\" disablePadding>\n                            <FundItem fund={fund} onAdd={onAdd} />\n                        </List>\n                    </Collapse>\n                );\n            })}\n        </div>\n    );\n};\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport { IFundInfo } from '../../models';\nimport { FundInfoItem } from './FundInfoItem';\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            width: '100%',\n            maxWidth: 360,\n            backgroundColor: theme.palette.background.paper,\n            overflowY: 'scroll',\n        },\n    }),\n);\n\nexport interface IFundPickerProps {\n    allFunds: IFundInfo[];\n    onAddFund(company: string, fundName: string): void;\n}\n\nexport const FundPicker: React.FunctionComponent<IFundPickerProps> = ({ allFunds, onAddFund }) => {\n    const classes = useStyles();\n\n    return (\n        <List\n            component=\"nav\"\n            aria-labelledby=\"nested-list-subheader\"\n            subheader={\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\">\n                    Välj Fonder\n                </ListSubheader>\n            }\n            className={classes.root}\n        >\n            {allFunds.map((fundInfo: IFundInfo, index) => {\n                return <FundInfoItem key={index} fundInfo={fundInfo} onAddFund={onAddFund} />;\n            })}\n        </List>\n    );\n};\n","import * as React from 'react';\nimport { IFundInfo } from '../models';\nimport { FundPicker } from './FundPicker';\nimport { fundRecordService } from '../services';\n\nexport interface IFundViewProps {\n    funds: IFundInfo[];\n}\nexport class FundView extends React.Component<IFundViewProps> {\n    public render() {\n        return (\n            <div style={{ display: 'flex', overflow: 'hidden' }}>\n                <FundPicker allFunds={this.props.funds} onAddFund={this.addFund} />\n            </div>\n        );\n    }\n\n    private async addFund(company: string, name: string) {\n        await fundRecordService.addFund(company, name);\n    }\n}\n","import { IFundRecord } from '../../models';\nimport * as React from 'react';\nimport { ListItem, ListItemText, TextField, IconButton } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nexport interface IFundHoldingProps {\n    company: string;\n    fundName: string;\n    holdings: number;\n    onDelete(company: string, fundName: string): void;\n    onHoldingsChange(company: string, fund: string, holdings: number): void;\n}\n\ninterface IFundHoldingState {\n    internalHoldings: number;\n}\n\nexport class FundHoldingItem extends React.Component<IFundHoldingProps, IFundHoldingState> {\n    constructor(props: IFundHoldingProps) {\n        super(props);\n        this.state = {\n            internalHoldings: this.props.holdings,\n        };\n    }\n\n    public render() {\n        return (\n            <ListItem button style={{ marginLeft: 4 }}>\n                <ListItemText primary={this.props.fundName} />\n                <TextField\n                    style={{ maxWidth: 80 }}\n                    label=\"Andelar\"\n                    variant=\"outlined\"\n                    type=\"number\"\n                    InputLabelProps={{\n                        shrink: true,\n                    }}\n                    value={this.state.internalHoldings}\n                    onChange={(event) => {\n                        const { value } = event.target;\n                        this.setState({ internalHoldings: Number(value) });\n                    }}\n                    onBlur={this.onHoldingsBlur}\n                />\n                <IconButton edge=\"end\" aria-label=\"delete fund\" onClick={this.onDelete}>\n                    <DeleteIcon />\n                </IconButton>\n            </ListItem>\n        );\n    }\n\n    private onDelete = () => {\n        this.props.onDelete(this.props.company, this.props.fundName);\n    };\n\n    private onHoldingsBlur = () => {\n        this.props.onHoldingsChange(\n            this.props.company,\n            this.props.fundName,\n            this.state.internalHoldings,\n        );\n    };\n}\n","import React from 'react';\nimport { IFundRecord } from '../models';\nimport { List, ListItem, ListItemText } from '@material-ui/core';\n\nimport { fundRecordService } from '../services';\nimport { FundHoldingItem } from './FundHolding/FundHoldingItem';\n\nexport interface IFundTableState {\n    funds: IFundRecord[];\n}\n\nexport class FundTable extends React.Component<{}, IFundTableState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            funds: [],\n        };\n    }\n    public async componentDidMount() {\n        const data = await fundRecordService.getFunds();\n        this.setState({ funds: data });\n    }\n\n    public render() {\n        return (\n            <div style={{ display: 'flex', overflow: 'hidden' }}>\n                <List\n                    style={{\n                        width: '100%',\n                        maxWidth: 360,\n                        backgroundColor: 'white',\n                        overflowY: 'scroll',\n                    }}\n                    component=\"nav\"\n                    aria-labelledby=\"nested-list-subheader\"\n                >\n                    {this.state.funds.map((fund) => {\n                        return this.renderHolding(fund);\n                    })}\n                </List>\n            </div>\n        );\n    }\n\n    private renderHolding(fund: IFundRecord) {\n        return (\n            <div key={fund.company}>\n                <ListItem style={{ color: 'green' }}>\n                    <ListItemText primary={fund.company} />\n                </ListItem>\n                {fund.holdingInfo.map((item) => {\n                    return (\n                        <FundHoldingItem\n                            key={item.fundName}\n                            company={fund.company}\n                            fundName={item.fundName}\n                            holdings={item.holdings || 0}\n                            onDelete={this.deleteFund}\n                            onHoldingsChange={this.changeHoldings}\n                        />\n                    );\n                })}\n            </div>\n        );\n    }\n\n    private deleteFund = (company: string, fund: string) => {\n        fundRecordService.deleteFund(company, fund).then(() => {\n            this.updateFunds();\n        });\n    };\n\n    private changeHoldings = (company: string, fund: string, holdings: number) => {\n        fundRecordService.changeHoldings(company, fund, holdings).then(() => {\n            this.updateFunds();\n        });\n    };\n\n    private async updateFunds() {\n        const data = await fundRecordService.getFunds();\n        this.setState({\n            funds: data,\n        });\n    }\n}\n","import * as React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport { Revenue, FundView } from './components';\nimport { IFundInfo } from './models';\nimport { FundTable } from './components/FundTable';\n\nexport interface IMainProps {\n    funds: IFundInfo[];\n}\nexport class Main extends React.Component<IMainProps> {\n    public render() {\n        return (\n            <Switch>\n                <Route exact path=\"/\" component={Revenue} />\n                <Route path=\"/funds\" render={(props) => <FundView funds={this.props.funds} />} />\n                <Route path=\"/holdings\" render={(props) => <FundTable />} />\n            </Switch>\n        );\n    }\n}\n","import * as React from 'react';\nimport { MemoryRouter } from 'react-router';\nimport { IFundInfo } from './models';\nimport { Main } from './Main';\nimport MenuAppBar from './components/MenuAppBar';\nimport Container from '@material-ui/core/Container';\nimport { fundInfoService } from './services';\n\ninterface IAppLoaderState {\n    allFunds: IFundInfo[];\n}\n\nexport class AppLoader extends React.Component<{}, IAppLoaderState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            allFunds: [],\n        };\n    }\n\n    public async componentDidMount() {\n        this.setState({ allFunds: await fundInfoService.getFundInfo() });\n    }\n\n    public render() {\n        return (\n            <MemoryRouter>\n                <MenuAppBar />\n                <Container style={{ marginTop: 56 }}>\n                    <Main funds={this.state.allFunds} />\n                </Container>\n            </MemoryRouter>\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { AppLoader } from './AppLoader';\n\nReactDOM.render(<div>\n    <AppLoader />\n</div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}